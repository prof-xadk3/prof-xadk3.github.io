'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (args) {
	var hookPort = args.hookPort,
	    proxyAddress = args.proxyAddress,
	    hookHost = args.hookHost,
	    branch = args.branch,
	    repository = args.repository;


	var ws = void 0;

	function start() {
		ws = new WebSocket(proxyAddress);

		ws.on('open', function open() {
			console.log('连接服务器成功');
			ws.send(JSON.stringify({
				action: 'reg',
				data: {
					branch: branch,
					repository: repository
				}
			}));
			isConnect = true;
		});

		ws.on('close', function outcoming(data) {
			isConnect = false;
			// Broadcast to everyone else.
			console.log('连接断开，正在重新连接。。。');
			if (hartboomTid) {
				clearInterval(hartboomTid);
				hartboomTid = null;
			}
			setTimeout(start, 1000);
			// start();
		});

		ws.on('error', function error(err) {
			isConnect = false;
			errTryCount++;
			console.log('连接服务器失败', err);
			if (hartboomTid) {
				clearInterval(hartboomTid);
				hartboomTid = null;
			}
			if (errTryCount < errTryCountLen) {
				setTimeout(start, 1000);
			} else {
				process.exit(1);
			}
		});

		ws.on('message', function incoming(data) {
			data = JSON.parse(data);
			var headers = data.request.header || {};
			var url = 'http://127.0.0.1:' + hookPort + data.request.url;
			axios.post(url, data.body, {
				headers: headers
			});
		});

		if (hartboomTid) {
			clearInterval(hartboomTid);
			hartboomTid = null;
		}
		hartboomTid = setInterval(function () {
			if (!isConnect) {
				console.log('还没有连接服务器：' + new Date());
				return;
			}
			ws.send(JSON.stringify({
				action: 'hartboom',
				t: new Date().getTime()
			}));
			console.log('发送心跳：' + new Date());
		}, hartboomSec);
	}

	start();
};

var WebSocket = require('ws');
var axios = require('axios');
var qs = require('querystring');

var hartboomTid = null;
var hartboomSec = 60000;
var errTryCount = 0;
var errTryCountLen = 20;
var isConnect = false;