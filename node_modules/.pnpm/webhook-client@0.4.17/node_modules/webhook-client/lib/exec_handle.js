'use strict';

var start = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (!stopingPromise) {
                            _context.next = 3;
                            break;
                        }

                        _context.next = 3;
                        return stopingPromise;

                    case 3:
                        p = (0, _child_process.fork)(__dirname + '/util/startAppServer', [serverStartCmd], { silent: true });
                        global.p = p;
                        console.log("应用启动成功");
                        p.stdout.on('data', function (chunk) {
                            webhookServerCtl.boardcast('start', null, chunk.toString());
                        });
                        p.stderr.on('data', function (chunk) {
                            webhookServerCtl.boardcast('start:err', null, chunk.toString());
                        });
                        p.on('close', function (code) {
                            webhookServerCtl.boardcast('start:exit', null, code);
                        });
                        // return p;

                    case 9:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function start() {
        return _ref.apply(this, arguments);
    };
}();

var exec = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(shell, id) {
        var p2;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        if (!stopingPromise) {
                            _context2.next = 3;
                            break;
                        }

                        _context2.next = 3;
                        return stopingPromise;

                    case 3:
                        p2 = (0, _child_process.fork)(__dirname + '/util/startAppServer', [shell], { silent: true });

                        p2.stdout.on('data', function (chunk) {
                            webhookServerCtl.boardcast('exec', id, chunk.toString());
                        });
                        p2.on('close', function (code) {
                            webhookServerCtl.boardcast('exec:exit', id, code);
                        });
                        p2.stderr.on('data', function (chunk) {
                            webhookServerCtl.boardcast('exec:err', id, chunk.toString());
                        });
                        console.log("执行命令：" + shell);

                        // p.
                        // webhookServerCtl.boardcast("执行命令：" + shell);

                    case 8:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function exec(_x, _x2) {
        return _ref2.apply(this, arguments);
    };
}();

var stop = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var curP;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        if (!stopingPromise) {
                            _context3.next = 2;
                            break;
                        }

                        return _context3.abrupt('return', stopingPromise);

                    case 2:
                        curP = global.p;

                        serverStopCmd && _shelljs2.default.exec(serverStopCmd);

                        if (!curP.killed) {
                            _context3.next = 8;
                            break;
                        }

                        return _context3.abrupt('return', Promise.resolve({}));

                    case 8:
                        if (!stopingPromise) {
                            stopingPromise = new Promise(function (resolve, reject) {
                                if (curP.connected) {
                                    if (isWin) {
                                        _shelljs2.default.exec("taskkill.exe /F /T /PID " + curP.pid);
                                    } else {
                                        _shelljs2.default.exec("kill -9 " + curP.pid);
                                    }
                                }
                                setTimeout(function () {
                                    if (curP.connected) {
                                        curP.kill();
                                    }
                                    stopingPromise = null;
                                    console.log("停止服务完成");
                                    resolve();
                                }, 2000);
                            });
                        }
                        return _context3.abrupt('return', Promise.resolve({}));

                    case 10:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this);
    }));

    return function stop() {
        return _ref3.apply(this, arguments);
    };
}();

var pull = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        _shelljs2.default.exec('git clean -f');
                        // shelljs.exec(`git fetch --all`);
                        _shelljs2.default.exec('git reset --hard origin/' + branch);
                        // shelljs.exec(`git checkout ${branch}`);
                        _shelljs2.default.exec('git pull origin ' + branch + ' --force');

                    case 3:
                    case 'end':
                        return _context4.stop();
                }
            }
        }, _callee4, this);
    }));

    return function pull() {
        return _ref4.apply(this, arguments);
    };
}();

var _optimist = require('optimist');

var _optimist2 = _interopRequireDefault(_optimist);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _child_process = require('child_process');

var _websocketProxyServer = require('./util/websocketProxyServer');

var _websocketProxyServer2 = _interopRequireDefault(_websocketProxyServer);

var _webhookServer = require('./util/webhookServer');

var _webhookServer2 = _interopRequireDefault(_webhookServer);

var _wechatServer = require('./util/wechatServer');

var _wechatServer2 = _interopRequireDefault(_wechatServer);

var _isWindows = require('is-windows');

var _isWindows2 = _interopRequireDefault(_isWindows);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } // const os = require('os');


var isWin = (0, _isWindows2.default)();

var argv = _optimist2.default.argv;
// console.log(argv);
// process.exit(0);

// var ifaces = os.networkInterfaces();

function showHelp() {
    console.log(['usage: webhook-c [options] --start-cmd "cmd"', '', 'options:', '  --start-cmd "exec"     应用启动运行命令，例如 "mvn spring-boot:run"、"npm start" 等  ,前后必须加上双引号，该参数必须填写', '  --stop-cmd "exec"      停止应用命令， 例如 "tomcat stop"、"ps -ef | grep java | kill -9"', '  --cwd path             工作目录，默认当前目录', '  --pa  wsAddress        跳板服务器的地址（ws(s)://域名:端口） websocket 地址', '  --a host               webhook 侦听的域名 默认 0.0.0.0', '  --p port               webhook 侦听的端口 默认 80', '  --wechat-server url    微信服务器地址 ', '  -h --help              Print this list and exit.'].join('\n'));
    process.exit();
}

if (argv.h || argv.help) {
    showHelp();
}

var port = argv.p || parseInt(process.env.PORT, 10) || 8008,
    cwdPath = argv.cwd || process.cwd(),
    host = argv.a || '0.0.0.0',
    serverStartCmd = argv['start-cmd'],
    serverStopCmd = argv['stop-cmd'],
    wechatServerUrl = argv['wechat-server'],
    proxyAddress = argv.pa; // || 'git-webhook-proxy-server-front-server.193b.starter-ca-central-1.openshiftapps.com'

if (!serverStartCmd) {
    showHelp();
}

if (!_shelljs2.default.which('git')) {
    _shelljs2.default.echo('Sorry, this script requires git');
    _shelljs2.default.exit(1);
}

if (!_fs2.default.existsSync('.git')) {
    _shelljs2.default.echo('Sorry, current path is not git repo');
    _shelljs2.default.exit(1);
}

// shelljs.config.silent = true; // todo 

var branch = _shelljs2.default.exec('git symbolic-ref --short -q HEAD').trim();
var projectNameGitUrl = _shelljs2.default.exec('git config --get remote.origin.url').trim();
var repository = /.*\/([^\/]*).git$/.exec(projectNameGitUrl)[1];

// console.log(repository);
// process.exit();


var stopingPromise = null;
var p = void 0;
var webhookServerCtl = void 0;
var wechatCtl = void 0;

stop.isStoping = function () {
    console.log(!!stopingPromise);
    if (stopingPromise) {
        return true;
    } else {
        return false;
    }
};

if (wechatServerUrl) {
    wechatCtl = (0, _wechatServer2.default)({
        wechatServerUrl: wechatServerUrl
    });
}

webhookServerCtl = (0, _webhookServer2.default)({
    host: host,
    port: port,
    proxyAddress: proxyAddress,
    cmder: {
        start: start,
        stop: stop,
        pull: pull,
        exec: exec
    },
    wechatCtl: wechatCtl,
    branch: branch
});

if (proxyAddress) {
    (0, _websocketProxyServer2.default)({
        hookPort: port,
        proxyAddress: proxyAddress,
        hookHost: host === '0.0.0.0' ? 'localhost' : host,
        branch: branch,
        repository: repository
    });
}

start();
console.log('webhook\u542F\u52A8\u5B8C\u6210\uFF0C\u63A7\u5236\u53F0\u8BF7\u8BBF\u95EE\uFF1A http://' + (host === '0.0.0.0' ? 'localhost' : host) + ':' + port + '/index.html');