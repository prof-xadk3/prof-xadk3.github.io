"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitCommand = exports.DEFAULT_PROCESS_NAME = void 0;
var _clipanion = require("clipanion");
var _path = _interopRequireDefault(require("path"));
var _core = require("@verdaccio/core");
var _bootstrap = require("../../bootstrap");
var _configPath = _interopRequireDefault(require("../../config-path"));
var _utils = require("../../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
require('pkginfo')(module);
const pkgVersion = module.exports.version;
const pkgName = module.exports.name;
const DEFAULT_PROCESS_NAME = 'verdaccio';
exports.DEFAULT_PROCESS_NAME = DEFAULT_PROCESS_NAME;
const logger = require('../../logger');
class InitCommand extends _clipanion.Command {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "listen", _clipanion.Option.String('-l,--listen', {
      description: 'host:port number to listen on (default: localhost:4873)'
    }));
    _defineProperty(this, "config", _clipanion.Option.String('-c,--config', {
      description: 'use this configuration file (default: ./config.yaml)'
    }));
  }
  initLogger(logConfig) {
    if (logConfig.logs) {
      logConfig.log = logConfig.logs;
      _core.warningUtils.emit(_core.warningUtils.Codes.VERWAR002);
    }
    logger.setup(logConfig.log);
  }
  async execute() {
    let configPathLocation;
    try {
      configPathLocation = (0, _configPath.default)(this.config);
      const configParsed = (0, _utils.parseConfigFile)(configPathLocation);
      if (!configParsed.self_path) {
        configParsed.self_path = _path.default.resolve(configPathLocation);
        this.initLogger(configParsed);
        // compatibility with 6.x plugins
        configParsed.configPath = configParsed.self_path;
      }
      if (!configParsed.https) {
        configParsed.https = {
          enable: false
        };
      }
      process.title = configParsed.web && configParsed.web.title || 'verdaccio';
      (0, _bootstrap.startVerdaccio)(configParsed, this.listen, configPathLocation, pkgVersion, pkgName, _bootstrap.listenDefaultCallback);
      logger.logger.info({
        file: configPathLocation
      }, 'config file  - @{file}');
    } catch (err) {
      var _logger$logger;
      if (typeof (logger === null || logger === void 0 ? void 0 : (_logger$logger = logger.logger) === null || _logger$logger === void 0 ? void 0 : _logger$logger.fatal) === 'function') {
        logger.logger.fatal({
          file: configPathLocation,
          err: err
        }, 'cannot open config file @{file}: @{!err.message}');
      } else {
        // eslint-disable-next-line no-console
        console.error(`cannot open config file ${configPathLocation}: ${!err.message}`);
      }
      process.exit(1);
    }
  }
}
exports.InitCommand = InitCommand;
_defineProperty(InitCommand, "paths", [_clipanion.Command.Default]);
_defineProperty(InitCommand, "usage", _clipanion.Command.Usage({
  description: `launch the server`,
  details: `
      This start the registry in the default port.

      When used without arguments, it:

      - bootstrap the server at the port  \`4873\`

      The optional arguments are:

      - \`--listen\` to switch the default server port,
      - \`--config\` to define a different configuration path location,

    `,
  examples: [[`Runs the server with the default configuration`, `verdaccio`], [`Runs the server in the port 5000`, `verdaccio --listen 5000`], [`Runs the server by using a different absolute location of the configuration file`, `verdaccio --config /home/user/verdaccio/config.yaml`]]
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,