"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lunrMutableIndexes = _interopRequireDefault(require("lunr-mutable-indexes"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Handle the search Indexer.
 */
class Search {
  // @ts-ignore

  /**
   * Constructor.
   */
  constructor() {
    _defineProperty(this, "index", void 0);
    _defineProperty(this, "storage", void 0);
    this.index = (0, _lunrMutableIndexes.default)(function () {
      // FIXME: there is no types for this library
      /* eslint no-invalid-this:off */
      // @ts-ignore
      this.field('name', {
        boost: 10
      });
      // @ts-ignore
      this.field('description', {
        boost: 4
      });
      // @ts-ignore
      this.field('author', {
        boost: 6
      });
      // @ts-ignore
      this.field('keywords', {
        boost: 7
      });
      // @ts-ignore
      this.field('version');
      // @ts-ignore
      this.field('readme');
    });
  }

  /**
   * Performs a query to the indexer.
   * If the keyword is a * it returns all local elements
   * otherwise performs a search
   * @param {*} q the keyword
   * @return {Array} list of results.
   */
  query(query) {
    const localStorage = this.storage.localStorage;
    const hasScope = query.startsWith('@');
    // FIXME: lunr-mutable-indexes ignored '@' during indexing
    if (hasScope) {
      query = query.replace('@', '');
    }
    const results = query === '*' ? localStorage.storagePlugin.get(items => {
      items.map(function (pkg) {
        return {
          ref: pkg,
          score: 1
        };
      });
    }) : this.index.search(`*${query}*`);
    return hasScope ? results.filter(({
      ref
    }) => ref.startsWith('@')) : results;
  }

  /**
   * Add a new element to index
   * @param {*} pkg the package
   */
  add(pkg) {
    this.index.add({
      id: pkg.name,
      name: pkg.name,
      description: pkg.description,
      version: `v${pkg.version}`,
      keywords: pkg.keywords,
      author: pkg._npmUser ? pkg._npmUser.name : '???'
    });
  }

  /**
   * Remove an element from the index.
   * @param {*} name the id element
   */
  remove(name) {
    this.index.remove({
      id: name
    });
  }

  /**
   * Force a re-index.
   */
  reindex() {
    this.storage.getLocalDatabase((error, packages) => {
      if (error) {
        // that function shouldn't produce any
        throw error;
      }
      let i = packages.length;
      while (i--) {
        this.add(packages[i]);
      }
    });
  }

  /**
   * Set up the {Storage}
   * @param {*} storage An storage reference.
   */
  configureStorage(storage) {
    this.storage = storage;
    this.reindex();
  }
}
var _default = new Search();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,