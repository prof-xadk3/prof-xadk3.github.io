"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proxy_agent_1 = require("./proxy-agent");
const socks_proxy_agent_1 = __importDefault(require("socks-proxy-agent"));
jest.mock('agentkeepalive', () => {
    const MockHttp = mockHttpAgent('http');
    MockHttp['HttpsAgent'] = mockHttpAgent('https');
    return MockHttp;
});
function mockHttpAgent(type) {
    return function Agent(opts) {
        return Object.assign(Object.assign({}, opts), { __type: type });
    };
}
const OPTS = {
    agent: null,
    ca: 'ca',
    cert: 'cert',
    key: 'key',
    localAddress: 'localAddress',
    maxSockets: 5,
    strictSsl: true,
    timeout: 5,
};
test('all expected options passed down to proxy agent', () => {
    const opts = Object.assign({ httpsProxy: 'https://user:pass@my.proxy:1234/foo/', noProxy: 'qar.com, bar.com' }, OPTS);
    expect((0, proxy_agent_1.getProxyAgent)('https://foo.com/bar', opts).proxy).toEqual({
        ALPNProtocols: ['http 1.1'],
        auth: 'user:pass',
        ca: 'ca',
        cert: 'cert',
        host: 'my.proxy',
        key: 'key',
        localAddress: 'localAddress',
        maxSockets: 5,
        port: 1234,
        protocol: 'https:',
        rejectUnauthorized: true,
        timeout: 6,
    });
});
test('a socks proxy', () => {
    const opts = Object.assign({ httpsProxy: 'socks://user:pass@my.proxy:1234/foo' }, OPTS);
    const agent = (0, proxy_agent_1.getProxyAgent)('https://foo.com/bar', opts);
    expect(agent instanceof socks_proxy_agent_1.default).toBeTruthy();
    expect(agent['proxy']).toEqual({
        host: 'my.proxy',
        port: 1234,
        type: 5,
    });
});
test('proxy credentials are decoded', () => {
    const opts = Object.assign({ httpsProxy: `https://${encodeURIComponent('use@!r')}:${encodeURIComponent('p#as*s')}@my.proxy:1234/foo` }, OPTS);
    expect((0, proxy_agent_1.getProxyAgent)('https://foo.com/bar', opts).proxy).toEqual({
        ALPNProtocols: ['http 1.1'],
        auth: 'use@!r:p#as*s',
        ca: 'ca',
        cert: 'cert',
        host: 'my.proxy',
        key: 'key',
        localAddress: 'localAddress',
        maxSockets: 5,
        port: 1234,
        protocol: 'https:',
        rejectUnauthorized: true,
        timeout: 6,
    });
});
test('proxy credentials are decoded', () => {
    const opts = Object.assign({ httpsProxy: 'https://use@!r:p#as*s@my.proxy:1234/foo' }, OPTS);
    expect(() => (0, proxy_agent_1.getProxyAgent)('https://foo.com/bar', opts)).toThrow("Couldn't parse proxy URL");
});
//# sourceMappingURL=proxy-agent.spec.js.map