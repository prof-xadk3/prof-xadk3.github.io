import { Channel, Guild, Interaction, Member, Message, User } from "../../deps.js";
import { AmethystBot, CommandOptions } from "../../mod.js";
import { optionResults } from "../interfaces/commandArgumentOptions.js";
import { CommandClass } from "./Command.js";
export declare class Context {
    deffered: boolean;
    replied: boolean;
    sentMessage: Message | undefined;
    interaction?: Interaction;
    message?: Message;
    interactionContext: boolean;
    guildId: bigint | undefined;
    guild?: Guild;
    member?: Member;
    user?: User;
    author?: User;
    client: AmethystBot;
    options: optionResults;
    channel?: Channel;
    command: CommandClass | CommandOptions;
    id: BigInt;
    constructor(options: ContextOptions, client: AmethystBot);
    /**
     * It's a constructor for the Context class
     * @param {ContextOptions} options - ContextOptions
     * @param {AmethystBot} client - The client instance
     */
    followUp(content: any): Promise<Context>;
    /**
     * The followUp function is a wrapper for the reply function
     * @param {any} content - any - The content to send to the user. This can be a string, an object, or
     * a function that returns a string or object.
     * @returns The context object is being returned.
     */
    reply(content: any): Promise<Context>;
    /**
     * If the message is an interaction, edit the original message, otherwise edit the message that was
     * sent.
     * @param {any} content - any - The content to send.
     * @returns The context object.
     */
    editReply(content: any): Promise<Context>;
}
/**
 * ContextOptions is an object with optional properties interaction, message, interactionContext,
 * guildId, guild, member, options, and user, where interaction and message are of type Interaction and
 * Message, respectively, interactionContext is a boolean, guildId is a bigint or undefined, guild and
 * member are of type Guild and Member, respectively, options is of type optionResults, and user is of
 * type User.
 * @property {Interaction} interaction - The interaction object that was used to trigger the command.
 * @property {Message} message - The message that triggered the command.
 * @property {boolean} interactionContext - boolean - This is a boolean that is true if the command is
 * being used in an interaction.
 * @property {bigint | undefined} guildId - The ID of the guild the command was used in.
 * @property {Guild} guild - The guild the command was used in.
 * @property {Member} member - The member that triggered the command
 * @property {optionResults} options - optionResults;
 * @property {User} user - The user who sent the message
 */
type ContextOptions = {
    interaction?: Interaction;
    message?: Message;
    interactionContext: boolean;
    guildId: bigint | undefined;
    guild?: Guild;
    member?: Member;
    options: optionResults;
    channel?: Channel;
    user?: User;
    command: CommandClass | CommandOptions;
    id: BigInt;
};
/**
 * It creates a context object for a command
 * @param data - { interaction?: Interaction; message?: Message }
 * @param {optionResults} option - optionResults
 * @param {AmethystBot} bot - AmethystBot - The bot instance.
 * @returns A Context object.
 */
export declare function createContext(data: {
    interaction?: Interaction;
    message?: Message;
}, option: optionResults, command: CommandClass | CommandOptions, bot: AmethystBot): Promise<Context>;
export {};
