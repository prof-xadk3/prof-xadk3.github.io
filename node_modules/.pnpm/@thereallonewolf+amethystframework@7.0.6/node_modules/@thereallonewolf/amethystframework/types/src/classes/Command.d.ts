import { ApplicationCommandOption, PermissionStrings } from '../../deps.js';
import { AmethystBot, CommandCooldown, commandOption, Context } from '../../mod.js';
import { CommandOptions } from '../types/commandOptions.js';
export declare class CommandClass {
    name: string;
    description: string;
    category: string;
    args: commandOption[];
    aliases: string[];
    commandType: string[];
    /**The command cooldown*/
    cooldown?: CommandCooldown;
    /**Whether the command is allowed to run in non-nsfw channels*/
    nsfw: boolean;
    /**Whether the command can only be used by the bot's owners*/
    ownerOnly: boolean;
    /**The channel permissions needed by the member to execute the command*/
    userChannelPermissions: PermissionStrings[];
    /**The guild permissions needed by the member to execute the command*/
    userGuildPermissions: PermissionStrings[];
    /**The channel permissions needed by the bot to execute the command*/
    botChannelPermissions: PermissionStrings[];
    /**The guild permissions needed by the bot to execute the command*/
    botGuildPermissions: PermissionStrings[];
    /**If the command can only be used in guilds*/
    guildOnly: boolean;
    /**If the command can only be used in dms*/
    dmOnly: boolean;
    /** The command scope
     * @default "global" */
    scope: string;
    /**A list of guild ids that will have the command*/
    guildIds: bigint[];
    quotedArguments: boolean;
    /**Ignore bots when they try to use the command*/
    ignoreBots: boolean;
    extras: any;
    mention?: string;
    private: boolean;
    execute: (bot: AmethystBot, ctx: Context) => unknown;
    /**
     * It takes in a CommandOptions object and a client object, and then sets the properties of the
     * Command object to the properties of the CommandOptions object
     * @param {CommandOptions} options - CommandOptions - The options for the command.
     * @param {AmethystBot} client - AmethystBot - The client object
     */
    constructor(options: CommandOptions, client: AmethystBot);
    /**
     * If the command type is not an application command, return a default object. Otherwise, return the
     * command object with the options mapped to the correct types
     * @returns An object with the following properties:
     */
    toApplicationCommand(): ApplicationCommandOption;
    /**
     * It updates the command's properties with the options passed in
     * @param {CommandOptions} options - CommandOptions - The options object that is passed to the
     * constructor.
     * @param {AmethystBot} client - AmethystBot - The client that the command is being registered to.
     */
    update(options: CommandOptions, client: AmethystBot): void;
}
