// deno-lint-ignore-file
import * as dntShim from "../../_dnt.shims.js";
import { getMissingChannelPermissions, getMissingGuildPermissions } from '../../mod.js';
import { ErrorEnums } from '../interfaces/errors.js';
import { AmethystCollection } from '../utils/AmethystCollection.js';
export const inhibitors = new AmethystCollection();
const membersInCooldown = new Map();
inhibitors.set("cooldown", async (bot, command, options) => {
    const commandCooldown = command.cooldown || bot.defaultCooldown;
    if (!commandCooldown ||
        (options?.author.id && bot.ignoreCooldown?.includes(options?.author.id)))
        return true;
    const key = `${options.author.id}-${command.name}`;
    const cooldown = membersInCooldown.get(key);
    if (cooldown) {
        if (cooldown.used >= (commandCooldown.allowedUses || 1)) {
            const now = Date.now();
            if (cooldown.timestamp > now) {
                return {
                    type: ErrorEnums.COOLDOWN,
                    value: {
                        expiresAt: Date.now() + commandCooldown.seconds * 1000,
                        executedAt: Date.now(),
                    },
                };
            }
            else {
                cooldown.used = 0;
            }
        }
        membersInCooldown.set(key, {
            used: cooldown.used + 1,
            timestamp: Date.now() + commandCooldown.seconds * 1000,
        });
        return {
            type: ErrorEnums.COOLDOWN,
            value: {
                expiresAt: Date.now() + commandCooldown.seconds * 1000,
                executedAt: Date.now(),
            },
        };
    }
    membersInCooldown.set(key, {
        used: 1,
        timestamp: Date.now() + commandCooldown.seconds * 1000,
    });
    return true;
});
dntShim.setInterval(() => {
    const now = Date.now();
    membersInCooldown.forEach((cooldown, key) => {
        if (cooldown.timestamp > now)
            return;
        membersInCooldown.delete(key);
    });
}, 30000);
// deno-lint-ignore require-await
inhibitors.set("ownerOnly", async (bot, command, options) => {
    if (command.ownerOnly &&
        (!options?.author.id || !bot.owners?.includes(options.author.id)))
        return { type: ErrorEnums.OWNER_ONLY };
    return true;
});
inhibitors.set("botPermissions", async (bot, cmd, options) => {
    const command = cmd;
    if (command.botGuildPermissions?.length &&
        (!options?.guildId ||
            getMissingGuildPermissions(bot, (await bot.cache.guilds.get(options.guildId)), (await bot.cache.members.get(bot.id, options.guildId)), command.botGuildPermissions).length))
        return {
            type: ErrorEnums.BOT_MISSING_PERMISSIONS,
            channel: false,
            value: getMissingGuildPermissions(bot, options.guild, (await bot.cache.members.get(bot.id, options?.guildId)), command.botGuildPermissions),
        };
    if (command.botChannelPermissions?.length &&
        (!options?.channel.id ||
            (await getMissingChannelPermissions(bot, options.channel.id, bot.id, command.botChannelPermissions)).length))
        return {
            type: ErrorEnums.BOT_MISSING_PERMISSIONS,
            channel: true,
            value: await getMissingChannelPermissions(bot, options.channel.id, bot.id, command.botChannelPermissions),
        };
    return true;
});
inhibitors.set("userPermissions", async (bot, cmd, options) => {
    const command = cmd;
    if (command.userGuildPermissions?.length &&
        (!options?.guildId ||
            !options.author.id ||
            getMissingGuildPermissions(bot, (await bot.cache.guilds.get(options.guildId)), options.member, command.userGuildPermissions).length))
        return {
            type: ErrorEnums.USER_MISSING_PERMISSIONS,
            channel: false,
            value: getMissingGuildPermissions(bot, options.guild, options.member, command.userGuildPermissions),
        };
    if (command.userChannelPermissions?.length &&
        (!options?.guildId ||
            !options.author.id ||
            (await getMissingChannelPermissions(bot, options.channel, options.member, command.userChannelPermissions)).length))
        return {
            type: ErrorEnums.USER_MISSING_PERMISSIONS,
            channel: true,
            value: getMissingGuildPermissions(bot, options.guild, options.member, command.userChannelPermissions),
        };
    return true;
});
