"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Components_instances, _Components_stringToEmoji;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Components = void 0;
const deps_js_1 = require("../../deps.js");
const snowflakeRegex = /[0-9]{17,19}/;
/* It's an array of Action Rows that has a few methods to add Action Rows and Buttons */
class Components extends Array {
    constructor(...args) {
        super(...args);
        _Components_instances.add(this);
        return this;
    }
    /**
     * Don't allow more than 5 Action Rows
     * @returns The array itself.
     */
    addActionRow() {
        // Don't allow more than 5 Action Rows
        if (this.length === 5)
            return this;
        this.push({
            type: 1,
            components: [],
        });
        return this;
    }
    addSelectComponent(label, customId, options, placeholder, minValues, maxValues, disabled) {
        if (options.length > 25)
            throw new Error("SelectComponent Cannot have more than 25 options");
        this.addActionRow();
        let row = this[this.length - 1];
        row.components = [
            {
                type: 3,
                label: label,
                customId,
                options,
                placeholder,
                minValues,
                maxValues,
                disabled,
            },
        ];
    }
    /**
     * If the last Action Row has 5 buttons, create a new one, otherwise add the button to the last
     * Action Row
     * @param {string} label - The text that will be displayed on the button
     * @param style - keyof typeof ButtonStyles,
     * @param {string} idOrLink - The ID of the button or the URL of the link
     * @param [options] - { emoji?: string | bigint; disabled?: boolean }
     * @returns The object itself.
     */
    addButton(label, style, idOrLink, options) {
        // No Action Row has been created so do it
        if (!this.length)
            this.addActionRow();
        // Get the last Action Row
        let row = this[this.length - 1];
        // If the Action Row already has 5 buttons create a new one
        if (row.components.length === 5) {
            this.addActionRow();
            row = this[this.length - 1];
            // Apparently there are already 5 Full Action Rows so don't add the button
            if (row.components.length === 5)
                return this;
        }
        row.components.push({
            type: 2,
            label: label,
            customId: style !== "Link" ? idOrLink : undefined,
            style: deps_js_1.ButtonStyles[style],
            emoji: __classPrivateFieldGet(this, _Components_instances, "m", _Components_stringToEmoji).call(this, options?.emoji),
            url: style === "Link" ? idOrLink : undefined,
            disabled: options?.disabled,
        });
        return this;
    }
}
exports.Components = Components;
_Components_instances = new WeakSet(), _Components_stringToEmoji = function _Components_stringToEmoji(emoji) {
    if (!emoji)
        return;
    emoji = emoji.toString();
    // A snowflake id was provided
    if (snowflakeRegex.test(emoji)) {
        return {
            id: BigInt(emoji.match(snowflakeRegex)[0]),
        };
    }
    // A unicode emoji was provided
    return {
        name: emoji,
    };
};
