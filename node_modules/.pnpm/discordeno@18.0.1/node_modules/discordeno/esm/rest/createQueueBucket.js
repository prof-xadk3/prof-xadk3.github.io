import * as dntShim from "../_dnt.shims.js";
import { delay } from "../util/utils.js";
/**
 * A queue bucket is used in a similar manner as a leaky bucket.
 *
 * @param options The options used to configure this bucket.
 * @returns RefillingBucket
 */
export function createQueueBucket(rest, options) {
    const bucket = {
        remaining: options.remaining ?? 1,
        max: options.max ?? 1,
        interval: options.interval ?? 0,
        timeoutId: options.timeoutId ?? 0,
        processing: false,
        processingPending: false,
        firstRequest: true,
        waiting: [],
        pending: [],
        isRequestAllowed: function () {
            return bucket.remaining > 0;
        },
        waitUntilRequestAvailable: async function () {
            return new Promise(async (resolve) => {
                // If whatever amount of requests is left is more than the safety margin, allow the request
                if (bucket.isRequestAllowed()) {
                    // bucket.remaining++;
                    resolve();
                }
                else {
                    bucket.waiting.push(resolve);
                    await bucket.processWaiting();
                }
            });
        },
        processWaiting: async function () {
            // If already processing, that loop will handle all waiting requests.
            if (bucket.processing) {
                return;
            }
            // Mark as processing so other loops don't start
            bucket.processing = true;
            while (bucket.waiting.length) {
                if (bucket.isRequestAllowed()) {
                    // Resolve the next item in the queue
                    bucket.waiting.shift()?.();
                }
                else {
                    await delay(1000);
                }
            }
            // Mark as false so next pending request can be triggered by new loop.
            bucket.processing = false;
        },
        processPending: async function () {
            // If already processing, that loop will handle all pending requests.
            if (bucket.processingPending) {
                return;
            }
            // Mark as processing so other loops don't start
            bucket.processingPending = true;
            while (bucket.pending.length) {
                if (bucket.firstRequest || bucket.isRequestAllowed()) {
                    const [queuedRequest] = bucket.pending;
                    if (queuedRequest) {
                        const basicURL = rest.simplifyUrl(queuedRequest.request.url, queuedRequest.request.method);
                        // IF THIS URL IS STILL RATE LIMITED, TRY AGAIN
                        const urlResetIn = rest.checkRateLimits(rest, basicURL);
                        if (urlResetIn) {
                            dntShim.setTimeout(() => {
                                bucket.processPending();
                            }, urlResetIn);
                            break;
                        }
                        // IF A BUCKET EXISTS, CHECK THE BUCKET'S RATE LIMITS
                        const bucketResetIn = queuedRequest.payload.bucketId
                            ? rest.checkRateLimits(rest, queuedRequest.payload.bucketId)
                            : false;
                        if (bucketResetIn) {
                            dntShim.setTimeout(() => {
                                bucket.processPending();
                            }, bucketResetIn);
                            break;
                        }
                        bucket.firstRequest = false;
                        bucket.remaining--;
                        if (!bucket.timeoutId && !bucket.remaining && bucket.interval) {
                            bucket.timeoutId = dntShim.setTimeout(() => {
                                bucket.remaining = bucket.max;
                                bucket.timeoutId = 0;
                            }, bucket.interval);
                        }
                        // Remove from queue, we are executing it.
                        bucket.pending.shift();
                        rest.processGlobalQueue(rest, {
                            ...queuedRequest,
                            urlToUse: queuedRequest.request.url,
                            basicURL,
                        });
                    }
                }
                else {
                    await delay(1000);
                }
            }
            // Mark as false so next pending request can be triggered by new loop.
            bucket.processingPending = false;
            rest.cleanupQueues(rest);
        },
        handleCompletedRequest: function (headers) {
            bucket.max = headers.max;
            bucket.interval = headers.interval;
            bucket.remaining = headers.remaining;
            if (bucket.remaining <= 1) {
                bucket.timeoutId = dntShim.setTimeout(() => {
                    bucket.remaining = bucket.max;
                    bucket.timeoutId = 0;
                }, headers.interval);
            }
        },
        makeRequest: async function (options) {
            await bucket.waitUntilRequestAvailable();
            bucket.pending.push(options);
            bucket.processPending();
        },
    };
    return bucket;
}
