import * as dntShim from "../_dnt.shims.js";
import { decode } from "../util/base64.js";
import { USER_AGENT } from "../util/constants.js";
/** Creates the request body and headers that are necessary to send a request. Will handle different types of methods and everything necessary for discord. */
export function createRequestBody(rest, options) {
    const headers = {
        "user-agent": USER_AGENT,
    };
    if (!options.unauthorized)
        headers["authorization"] = `Bot ${rest.token}`;
    // SOMETIMES SPECIAL HEADERS (E.G. CUSTOM AUTHORIZATION) NEED TO BE USED
    if (options.headers) {
        for (const key in options.headers) {
            headers[key.toLowerCase()] = options.headers[key];
        }
    }
    // GET METHODS SHOULD NOT HAVE A BODY
    if (options.method === "GET") {
        options.body = undefined;
    }
    // IF A REASON IS PROVIDED ENCODE IT IN HEADERS
    if (options.body?.reason) {
        headers["X-Audit-Log-Reason"] = encodeURIComponent(options.body.reason);
        options.body.reason = undefined;
    }
    // IF A FILE/ATTACHMENT IS PRESENT WE NEED SPECIAL HANDLING
    if (options.body?.file) {
        const files = findFiles(options.body.file);
        const form = new dntShim.FormData();
        // WHEN CREATING A STICKER, DISCORD WANTS FORM DATA ONLY
        if (options.url?.endsWith("/stickers") && options.method === "POST") {
            form.append(`file`, files[0].blob, files[0].name);
            form.append(`name`, options.body.name);
            form.append(`description`, options.body.description);
            form.append(`tags`, options.body.tags);
        }
        else {
            for (let i = 0; i < files.length; i++) {
                form.append(`file${i}`, files[i].blob, files[i].name);
            }
            form.append("payload_json", JSON.stringify({ ...options.body, file: undefined }));
        }
        options.body.file = form;
    }
    else if (options.body && !["GET", "DELETE"].includes(options.method)) {
        headers["Content-Type"] = "application/json";
    }
    return {
        headers,
        body: (options.body?.file ?? JSON.stringify(options.body)),
        method: options.method,
    };
}
function findFiles(file) {
    if (!file) {
        return [];
    }
    const files = Array.isArray(file) ? file : [file];
    return files.filter(coerceToFileContent);
}
function coerceToFileContent(value) {
    if (!value || typeof value !== "object") {
        return false;
    }
    const file = value;
    if (typeof file.name !== "string") {
        return false;
    }
    switch (typeof file.blob) {
        case "string": {
            const match = file.blob.match(/^data:(?<mimeType>[a-zA-Z0-9\/]*);base64,(?<content>.*)$/);
            if (match?.groups === undefined) {
                return false;
            }
            const { mimeType, content } = match.groups;
            file.blob = new dntShim.Blob([decode(content)], { type: mimeType });
            return true;
        }
        case "object":
            return file.blob instanceof dntShim.Blob;
        default:
            return false;
    }
}
