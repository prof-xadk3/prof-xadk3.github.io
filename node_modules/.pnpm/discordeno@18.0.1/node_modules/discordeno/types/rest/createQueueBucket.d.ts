import { RestPayload, RestRequest } from "./rest.js";
import { RestManager } from "./restManager.js";
/**
 * A queue bucket is used in a similar manner as a leaky bucket.
 *
 * @param options The options used to configure this bucket.
 * @returns RefillingBucket
 */
export declare function createQueueBucket(rest: RestManager, options: QueueBucketOptions): QueueBucket;
export interface QueueBucketOptions {
    /** How many requests are remaining. Defaults to 1 */
    remaining?: number;
    /** Max number of requests allowed in this bucket. Defaults to 1. */
    max?: number;
    /** The time in milliseconds that discord allows to make the max number of invalid requests. Defaults to 0 */
    interval?: number;
    /** timer to reset to 0 */
    timeoutId?: number;
}
export interface QueueBucket {
    /** Amount of requests that have are remaining. Defaults to 1. */
    remaining: number;
    /** Max requests for this bucket. Defaults to 1. */
    max: number;
    /** The time that discord allows to make the max number of requests. Defaults to 0 */
    interval: number;
    /** timer to reset to 0 */
    timeoutId: number;
    /** The requests that are currently pending. */
    waiting: ((value: void | PromiseLike<void>) => void)[];
    /** The requests that are currently pending. */
    pending: BucketRequest[];
    /** Whether or not the waiting queue is already processing. */
    processing: boolean;
    /** Whether or not the pending queue is already processing. */
    processingPending: boolean;
    /** Whether the first request is pending. */
    firstRequest: boolean;
    /** Checks if a request is allowed at this time. */
    isRequestAllowed: () => boolean;
    /** Waits until a request is available */
    waitUntilRequestAvailable: () => Promise<void>;
    /** Begins processing the waiting queue of requests. */
    processWaiting: () => Promise<void>;
    /** Begins processing the pending queue of requests. */
    processPending: () => Promise<void>;
    /** Handler for whenever a request is validated. This should update the requested values or trigger any other necessary stuff. */
    handleCompletedRequest: (headers: {
        remaining: number;
        interval: number;
        max: number;
    }) => void;
    /** Adds a request to the queue. */
    makeRequest: (options: BucketRequest) => Promise<void>;
}
export interface BucketRequest {
    request: RestRequest;
    payload: RestPayload;
}
