import * as dntShim from "../_dnt.shims.js";
import { checkRateLimits } from "./checkRateLimits.js";
import { cleanupQueues } from "./cleanupQueues.js";
import { convertRestError } from "./convertRestError.js";
import { QueueBucket } from "./createQueueBucket.js";
import { createRequestBody } from "./createRequestBody.js";
import { processGlobalQueue } from "./processGlobalQueue.js";
import { processQueue } from "./processQueue.js";
import { processRateLimitedPaths } from "./processRateLimitedPaths.js";
import { processRequest } from "./processRequest.js";
import { processRequestHeaders } from "./processRequestHeaders.js";
import { RestPayload, RestRateLimitedPath, RestRequest } from "./rest.js";
import { runMethod } from "./runMethod.js";
import { RestSendRequestOptions, sendRequest } from "./sendRequest.js";
import { simplifyUrl } from "./simplifyUrl.js";
export declare function createRestManager(options: CreateRestManagerOptions): {
    invalidBucket: import("./createInvalidRequestBucket.js").InvalidRequestBucket;
    version: number;
    token: string;
    maxRetryCount: number;
    secretKey: string;
    customUrl: string;
    pathQueues: Map<string, QueueBucket>;
    processingQueue: boolean;
    processingRateLimitedPaths: boolean;
    globallyRateLimited: boolean;
    globalQueue: {
        request: RestRequest;
        payload: RestPayload;
        basicURL: string;
        urlToUse: string;
    }[];
    globalQueueProcessing: boolean;
    rateLimitedPaths: Map<string, RestRateLimitedPath>;
    debug: (text: string) => unknown;
    checkRateLimits: typeof checkRateLimits;
    cleanupQueues: typeof cleanupQueues;
    processQueue: typeof processQueue;
    processRateLimitedPaths: typeof processRateLimitedPaths;
    processRequestHeaders: typeof processRequestHeaders;
    processRequest: typeof processRequest;
    createRequestBody: typeof createRequestBody;
    runMethod: typeof runMethod;
    simplifyUrl: typeof simplifyUrl;
    processGlobalQueue: typeof processGlobalQueue;
    convertRestError: typeof convertRestError;
    sendRequest: typeof sendRequest;
    fetching: (options: RestSendRequestOptions) => void;
    fetched: (options: RestSendRequestOptions, response: dntShim.Response) => void;
};
export interface CreateRestManagerOptions {
    token: string;
    customUrl?: string;
    maxRetryCount?: number;
    version?: number;
    secretKey?: string;
    debug?: (text: string) => unknown;
    checkRateLimits?: typeof checkRateLimits;
    cleanupQueues?: typeof cleanupQueues;
    processQueue?: typeof processQueue;
    processRateLimitedPaths?: typeof processRateLimitedPaths;
    processRequestHeaders?: typeof processRequestHeaders;
    processRequest?: typeof processRequest;
    createRequestBody?: typeof createRequestBody;
    runMethod?: typeof runMethod;
    simplifyUrl?: typeof simplifyUrl;
    processGlobalQueue?: typeof processGlobalQueue;
    convertRestError?: typeof convertRestError;
    sendRequest?: typeof sendRequest;
    fetching?: (options: RestSendRequestOptions) => void;
    fetched?: (options: RestSendRequestOptions, response: dntShim.Response) => void;
}
export declare type RestManager = ReturnType<typeof createRestManager>;
