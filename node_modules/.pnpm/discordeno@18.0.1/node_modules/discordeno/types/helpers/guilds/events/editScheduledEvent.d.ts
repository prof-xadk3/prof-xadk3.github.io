import { Bot } from "../../../bot.js";
import { WithReason } from "../../../mod.js";
import { ScheduledEvent } from "../../../transformers/scheduledEvent.js";
import { BigString, ScheduledEventEntityType, ScheduledEventPrivacyLevel, ScheduledEventStatus } from "../../../types/shared.js";
/**
 * Edits a scheduled event.
 *
 * @param bot - The bot instance to use to make the request.
 * @param guildId - The ID of the guild to edit the scheduled event in.
 * @param eventId - The ID of the scheduled event to edit.
 * @returns An instance of the edited {@link ScheduledEvent}.
 *
 * @remarks
 * Requires the `MANAGE_EVENTS` permission.
 *
 * To start or end an event, modify the event's `status` property.
 *
 * The `entity_metadata` property is discarded for events whose `entity_type` is not {@link ScheduledEventEntityType.External}.
 *
 * Fires a _Guild Scheduled Event Update_ gateway event.
 *
 * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event}
 */
export declare function editScheduledEvent(bot: Bot, guildId: BigString, eventId: BigString, options: Partial<EditScheduledEvent>): Promise<ScheduledEvent>;
export interface EditScheduledEvent extends WithReason {
    /** the channel id of the scheduled event. null if switching to external event. */
    channelId: BigString | null;
    /** location of the event */
    location?: string;
    /** the name of the scheduled event */
    name: string;
    /** the description of the scheduled event */
    description?: string;
    /** the time the scheduled event will start */
    scheduledStartTime: number;
    /** the time the scheduled event will end if it does end. */
    scheduledEndTime?: number;
    /** the privacy level of the scheduled event */
    privacyLevel: ScheduledEventPrivacyLevel;
    /** the type of hosting entity associated with a scheduled event */
    entityType: ScheduledEventEntityType;
    /** the status of the scheduled event */
    status: ScheduledEventStatus;
}
