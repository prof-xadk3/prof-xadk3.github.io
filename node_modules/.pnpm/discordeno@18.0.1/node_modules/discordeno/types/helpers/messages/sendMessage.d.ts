import type { Bot } from "../../bot.js";
import { Embed } from "../../transformers/embed.js";
import { Message } from "../../transformers/message.js";
import { AllowedMentions, FileContent, MessageComponents } from "../../types/mod.js";
import { BigString } from "../../types/shared.js";
/**
 * Sends a message to a channel.
 *
 * @param bot - The bot instance to use to make the request.
 * @param channelId - The ID of the channel to send the message in.
 * @param options - The parameters for the creation of the message.
 * @returns An instance of the created {@link Message}.
 *
 * @remarks
 * Requires that the bot user be able to see the contents of the channel the message is to be sent in.
 *
 * If sending a message to a guild channel:
 * - Requires the `SEND_MESSAGES` permission.
 *
 * If sending a TTS message:
 * - Requires the `SEND_TTS_MESSAGES` permission.
 *
 * If sending a message as a reply to another message:
 * - Requires the `READ_MESSAGE_HISTORY` permission.
 * - The message being replied to cannot be a system message.
 *
 * ⚠️ The maximum size of a request (accounting for any attachments and message content) for bot users is _8 MiB_.
 *
 * Fires a _Message Create_ gateway event.
 *
 * @see {@link https://discord.com/developers/docs/resources/channel#create-message}
 */
export declare function sendMessage(bot: Bot, channelId: BigString, options: CreateMessage): Promise<Message>;
export interface CreateMessage {
    /** The message contents (up to 2000 characters) */
    content?: string;
    /** Can be used to verify a message was sent (up to 25 characters). Value will appear in the Message Create event. */
    nonce?: string | number;
    /** true if this is a TTS message */
    tts?: boolean;
    /** Embedded `rich` content (up to 6000 characters) */
    embeds?: Embed[];
    /** Allowed mentions for the message */
    allowedMentions?: AllowedMentions;
    /** Include to make your message a reply */
    messageReference?: {
        /** id of the originating message */
        messageId?: BigString;
        /**
         * id of the originating message's channel
         * Note: `channel_id` is optional when creating a reply, but will always be present when receiving an event/response that includes this data model.
         */
        channelId?: BigString;
        /** id of the originating message's guild */
        guildId?: BigString;
        /** When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true */
        failIfNotExists: boolean;
    };
    /** The contents of the file being sent */
    file?: FileContent | FileContent[];
    /** The components you would like to have sent in this message */
    components?: MessageComponents;
    /** IDs of up to 3 stickers in the server to send in the message */
    stickerIds?: [bigint] | [bigint, bigint] | [bigint, bigint, bigint];
}
