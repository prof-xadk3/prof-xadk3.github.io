"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectToVoiceChannel = void 0;
const deps_js_1 = require("../../../deps.js");
const permissions_js_1 = require("../../permissions.js");
function connectToVoiceChannel(bot) {
    const connectToVoiceChannel = bot.helpers.connectToVoiceChannel;
    bot.helpers.connectToVoiceChannel = async function (guildId, channelId, options) {
        const channel = bot.channels.get(bot.transformers.snowflake(channelId));
        if (!channel)
            throw new Error("CHANNEL_NOT_FOUND");
        if (![deps_js_1.ChannelTypes.GuildStageVoice, deps_js_1.ChannelTypes.GuildVoice].includes(channel.type)) {
            throw new Error("INVALID_CHANNEL_TYPE");
        }
        const guild = channel?.guildId && bot.guilds.get(channel.guildId);
        if (!guild)
            throw new Error("GUILD_NOT_FOUND");
        // Permissions needed for the bot to connect
        // CONNECT is needed
        const permsNeeded = ["CONNECT", "VIEW_CHANNEL"];
        // Check if there is space for the bot if channel has user limit
        // Having MANAGE_CHANNELS permissions bypasses the limit
        // --> Add MANAGE_CHANNELS perm to the check if it is needed
        if (channel.userLimit &&
            guild.voiceStates.filter((vs) => vs.channelId === channelId).size >=
                channel.userLimit) {
            permsNeeded.push("MANAGE_CHANNELS");
        }
        (0, permissions_js_1.requireBotChannelPermissions)(bot, channel, permsNeeded);
        return await connectToVoiceChannel(guildId, channelId, options);
    };
}
exports.connectToVoiceChannel = connectToVoiceChannel;
