{"version":3,"file":"core.esm.js","sources":["../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/Web3WalletsManager/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { BehaviorSubject } from 'rxjs';\nimport * as Web3ProvidersWs from 'web3-providers-ws';\nimport * as Web3ProvidersHttp from 'web3-providers-http';\nimport { Connector, Provider, SubscribedObject } from '@web3-wallets-kit/types';\n\nimport { ConnectResult, ConnectionStatus } from './types';\n\nexport * from './types';\n\nconst WebsocketProvider = (Web3ProvidersWs as unknown) as typeof Web3ProvidersWs.WebsocketProvider;\nconst HttpProvider = (Web3ProvidersHttp as unknown) as typeof Web3ProvidersHttp.HttpProvider;\n\ntype WebsocketProviderOptions = ConstructorParameters<typeof WebsocketProvider>[1];\ntype HttpProviderOptions = ConstructorParameters<typeof HttpProvider>[1];\n\ntype InfuraNetwork = 'rinkeby' | 'kovan' | 'mainnet' | 'ropsten' | 'goerli';\n\ninterface Options<W> {\n  defaultProvider: OptionsOfDefaultProvider;\n  makeWeb3(provider: Provider): W;\n}\n\ntype OptionsOfDefaultProvider =\n  | {\n      httpRpcUrl: string;\n      options?: HttpProviderOptions;\n    }\n  | {\n      wsRpcUrl: string;\n      options?: WebsocketProviderOptions;\n    }\n  | {\n      infuraAccessToken: string;\n      /** default: 'mainnet' */\n      network?: InfuraNetwork;\n      options?: WebsocketProviderOptions;\n    };\n\nexport class Web3WalletsManager<W> {\n  public web3: W;\n  public txWeb3 = new BehaviorSubject<W | null>(null);\n  public account = new BehaviorSubject<string | null>(null);\n  public chainId = new BehaviorSubject<number | null>(null);\n  public status = new BehaviorSubject<ConnectionStatus>('disconnected');\n\n  private options: Options<W>;\n  private activeConnector: Connector | null = null;\n  private accountSubscription: SubscribedObject | null = null;\n  private chainIdSubscription: SubscribedObject | null = null;\n  private disconnectSubscription: SubscribedObject | null = null;\n\n  constructor(options: Options<W>) {\n    this.options = {\n      ...options,\n      defaultProvider: {\n        network: 'mainnet',\n        ...options.defaultProvider,\n      },\n    };\n    this.checkOptions();\n    this.web3 = options.makeWeb3(this.getDefaultProvider());\n\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n\n    this.handleAccountChange = this.handleAccountChange.bind(this);\n    this.handleChainIdChange = this.handleChainIdChange.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n  public async connect(connector: Connector): Promise<ConnectResult> {\n    await this.disconnect();\n\n    this.activeConnector = connector;\n    const { makeWeb3 } = this.options;\n\n    try {\n      this.status.next('pending');\n\n      const { provider } = await connector.connect();\n\n      const web3 = makeWeb3(provider);\n      this.txWeb3.next(web3);\n\n      const account = await getAccount(connector);\n      this.account.next(account);\n\n      const chainId = await getChainId(connector);\n      this.chainId.next(chainId);\n\n      this.accountSubscription = connector.subscribeConnectAccount(this.handleAccountChange);\n      this.chainIdSubscription = connector.subscribeChainId(this.handleChainIdChange);\n      this.disconnectSubscription = connector.subscribeDisconnect(this.handleDisconnect);\n\n      this.status.next('connected');\n\n      return { provider, account, chainId };\n    } catch (error) {\n      this.disconnect();\n      throw error;\n    }\n  }\n\n  public async disconnect() {\n    try {\n      this.accountSubscription && this.accountSubscription.unsubscribe();\n      this.chainIdSubscription && this.chainIdSubscription.unsubscribe();\n      this.disconnectSubscription && this.disconnectSubscription.unsubscribe();\n      this.activeConnector && (await this.activeConnector.disconnect());\n    } finally {\n      this.resetState();\n    }\n  }\n\n  private resetState() {\n    this.activeConnector = null;\n    this.accountSubscription = null;\n    this.chainIdSubscription = null;\n    this.disconnectSubscription = null;\n\n    this.txWeb3.next(null);\n    this.account.next(null);\n    this.chainId.next(null);\n    this.status.next('disconnected');\n  }\n\n  private checkOptions() {\n    if (\n      !('httpRpcUrl' in this.options.defaultProvider) &&\n      !('wsRpcUrl' in this.options.defaultProvider) &&\n      !('infuraAccessToken' in this.options.defaultProvider)\n    ) {\n      console.error(\n        'You need to configure one of these parameters: \"httpRpcUrl\", \"wsRpcUrl\" or \"infuraAccessToken\".',\n      );\n    }\n  }\n\n  private getDefaultProvider(): Web3ProvidersWs.WebsocketProvider | Web3ProvidersHttp.HttpProvider {\n    if ('httpRpcUrl' in this.options.defaultProvider) {\n      const { httpRpcUrl, options } = this.options.defaultProvider;\n      return new HttpProvider(httpRpcUrl, options);\n    }\n\n    const defaultReconnectOptions = {\n      auto: true,\n      delay: 5000,\n    };\n\n    if ('wsRpcUrl' in this.options.defaultProvider) {\n      const { wsRpcUrl, options } = this.options.defaultProvider;\n      return new WebsocketProvider(wsRpcUrl, {\n        ...options,\n        reconnect: {\n          ...defaultReconnectOptions,\n          ...options?.reconnect,\n        },\n      });\n    }\n\n    if ('infuraAccessToken' in this.options.defaultProvider) {\n      const { infuraAccessToken, network = 'mainnet', options } = this.options.defaultProvider;\n      return new WebsocketProvider(`wss://${network}.infura.io/ws/v3/${infuraAccessToken}`, {\n        ...options,\n        reconnect: {\n          ...defaultReconnectOptions,\n          ...options?.reconnect,\n        },\n      });\n    }\n\n    return assertNever(this.options.defaultProvider);\n  }\n\n  private handleAccountChange(account: string) {\n    this.account.next(account);\n  }\n\n  private handleChainIdChange(chainId: number) {\n    this.chainId.next(chainId);\n  }\n\n  private handleDisconnect() {\n    this.disconnect();\n  }\n}\n\nexport function assertNever(value: never): never {\n  throw new Error(`Unexpected value: ${value}`);\n}\n\nasync function getAccount(connector: Connector): Promise<string> {\n  const account = await connector.getAccount();\n\n  if (!account) {\n    throw new Error('No Ethereum accounts found, you need to create an account in your wallet');\n  }\n\n  return account;\n}\n\nasync function getChainId(connector: Connector): Promise<number> {\n  const chainId = await connector.getChainId();\n\n  if (!chainId) {\n    throw new Error('ChainID is not found, you need to choose a network in your wallet');\n  }\n\n  return chainId;\n}\n"],"names":["_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","_finallyRethrows","finalizer","bind","getChainId","connector","chainId","Error","getAccount","account","WebsocketProvider","Web3ProvidersWs","HttpProvider","Web3ProvidersHttp","Web3WalletsManager","options","BehaviorSubject","defaultProvider","network","checkOptions","web3","makeWeb3","getDefaultProvider","connect","disconnect","handleAccountChange","handleChainIdChange","handleDisconnect","activeConnector","status","next","provider","txWeb3","accountSubscription","subscribeConnectAccount","chainIdSubscription","subscribeChainId","disconnectSubscription","subscribeDisconnect","error","unsubscribe","resetState","console","httpRpcUrl","defaultReconnectOptions","auto","delay","wsRpcUrl","reconnect","infuraAccessToken","assertNever","value"],"mappings":"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"}