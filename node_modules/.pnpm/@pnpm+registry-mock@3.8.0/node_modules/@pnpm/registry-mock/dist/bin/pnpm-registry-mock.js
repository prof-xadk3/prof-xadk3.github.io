#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cpr_1 = __importDefault(require("cpr"));
const __1 = __importDefault(require(".."));
const locations = __importStar(require("../lib/locations"));
const read_yaml_file_1 = require("read-yaml-file");
const write_yaml_file_1 = __importDefault(require("write-yaml-file"));
const path_1 = __importDefault(require("path"));
if (process.argv[2] === 'prepare') {
    const tempy = require('tempy');
    const storage = tempy.directory();
    const storageCache = locations.storageCache();
    (0, cpr_1.default)(storageCache, storage, {}, (err) => err && console.error(err));
    const config = (0, read_yaml_file_1.sync)(path_1.default.join(__dirname, '../../registry/config.yaml'));
    write_yaml_file_1.default.sync(locations.configPath(), {
        ...config,
        storage,
        uplinks: {
            npmjs: {
                url: process.env['PNPM_REGISTRY_MOCK_UPLINK'] || 'https://registry.npmjs.org/',
                // performance improvements
                // https://verdaccio.org/docs/en/uplinks
                // avoid go to uplink is offline
                max_fails: 100,
                // default is 10 min, avoid hit the registry for metadata
                maxage: '30m',
                // increase threshold to avoid uplink is offline
                fail_timeout: '10m',
                // increase threshold to avoid uplink is offline
                timeout: '600s',
                // pass down to request.js
                agent_options: {
                    keepAlive: true,
                    maxSockets: 40,
                    maxFreeSockets: 10
                },
            }
        }
    });
}
else {
    (0, __1.default)();
}
//# sourceMappingURL=pnpm-registry-mock.js.map