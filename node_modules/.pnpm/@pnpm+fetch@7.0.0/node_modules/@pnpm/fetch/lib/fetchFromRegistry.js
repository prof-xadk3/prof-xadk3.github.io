"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFetchFromRegistry = exports.fetchWithAgent = void 0;
const url_1 = require("url");
const network_agent_1 = require("@pnpm/network.agent");
const fetch_1 = require("./fetch");
const USER_AGENT = 'pnpm'; // or maybe make it `${pkg.name}/${pkg.version} (+https://npm.im/${pkg.name})`
const ABBREVIATED_DOC = 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*';
const JSON_DOC = 'application/json';
const MAX_FOLLOWED_REDIRECTS = 20;
function fetchWithAgent(url, opts) {
    const agent = (0, network_agent_1.getAgent)(url.toString(), {
        ...opts.agentOptions,
        strictSsl: opts.agentOptions.strictSsl ?? true,
    }); // eslint-disable-line
    const headers = opts.headers ?? {};
    // @ts-expect-error
    headers['connection'] = agent ? 'keep-alive' : 'close';
    return (0, fetch_1.fetch)(url, {
        ...opts,
        agent,
    });
}
exports.fetchWithAgent = fetchWithAgent;
function createFetchFromRegistry(defaultOpts) {
    return async (url, opts) => {
        const headers = {
            'user-agent': USER_AGENT,
            ...getHeaders({
                auth: opts?.authHeaderValue,
                fullMetadata: defaultOpts.fullMetadata,
                userAgent: defaultOpts.userAgent,
            }),
        };
        let redirects = 0;
        let urlObject = new url_1.URL(url);
        const originalHost = urlObject.host;
        while (true) {
            const agentOptions = {
                ...defaultOpts,
                ...opts,
                strictSsl: defaultOpts.strictSsl ?? true,
            }; // eslint-disable-line
            // We should pass a URL object to node-fetch till this is not resolved:
            // https://github.com/bitinn/node-fetch/issues/245
            const response = await fetchWithAgent(urlObject, {
                agentOptions,
                // if verifying integrity, node-fetch must not decompress
                compress: opts?.compress ?? false,
                headers,
                redirect: 'manual',
                retry: opts?.retry,
                timeout: opts?.timeout ?? 60000,
            });
            if (!(0, fetch_1.isRedirect)(response.status) || redirects >= MAX_FOLLOWED_REDIRECTS) {
                return response;
            }
            // This is a workaround to remove authorization headers on redirect.
            // Related pnpm issue: https://github.com/pnpm/pnpm/issues/1815
            redirects++;
            urlObject = new url_1.URL(response.headers.get('location'));
            if (!headers['authorization'] || originalHost === urlObject.host)
                continue;
            delete headers.authorization;
        }
    };
}
exports.createFetchFromRegistry = createFetchFromRegistry;
function getHeaders(opts) {
    const headers = {
        accept: opts.fullMetadata === true ? JSON_DOC : ABBREVIATED_DOC,
    };
    if (opts.auth) {
        headers['authorization'] = opts.auth;
    }
    if (opts.userAgent) {
        headers['user-agent'] = opts.userAgent;
    }
    return headers;
}
//# sourceMappingURL=fetchFromRegistry.js.map