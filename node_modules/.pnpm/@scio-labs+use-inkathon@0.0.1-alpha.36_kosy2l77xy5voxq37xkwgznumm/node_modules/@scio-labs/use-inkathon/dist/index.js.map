{"version":3,"sources":["../src/chains.ts","../src/helpers/accountsAreEqual.ts","../src/helpers/contractCall.ts","../src/helpers/getAbiMessage.ts","../src/helpers/decodeOutput.ts","../src/helpers/getGasLimit.ts","../src/helpers/deployContract.ts","../src/helpers/formatBalance.ts","../src/helpers/getBalance.ts","../src/helpers/initPolkadotJs.ts","../src/helpers/unwrapResult.ts","../src/registry.ts","../src/provider.tsx","../src/hooks/useBalance.ts","../src/hooks/useContract.ts","../src/hooks/useRegisteredContract.ts","../src/wallets.ts"],"names":["development","alephzeroTestnet","rococo","astar","shiden","shibuya","allSubstrateChains","getSubstrateChain","networkId","chain","accountsAreEqual","a1","a2","accountArraysAreEqual","a","i","BN","stringCamelCase","getAbiMessage","contract","method","abiMessage","m","isErr","o","isOk","getReturnTypeName","type","decodeOutput","result","_a","_b","_c","_d","output","decodedOutput","isError","returnType","returnTypeName","registry","r","errorText","okText","bnToBn","getGasLimit","api","_refTime","_proofSize","refTime","proofSize","getMaxGasLimit","reductionFactor","blockWeights","maxExtrinsic","maxRefTime","maxProofSize","contractCallDryRun","_0","_1","_2","_3","_4","__async","account","options","args","address","value","gasLimit","storageDepositLimit","contractQuery","queryFn","__spreadProps","__spreadValues","contractTx","statusCb","dryResult","resolve","reject","tx","unsub","isInBlock","errorEvent","e","CodePromise","deployContract","abi","wasm","constructorMethod","code","constructorFn","events","status","extrinsicFailedEvent","hash","formatBalance","balance","decimals","maxFractionDigits","formatBalanceToFixed","fractionDigits","getBalance","tokenDecimals","tokenSymbol","freeBalance","reservedBalance","balanceFormatted","ApiPromise","HttpProvider","WsProvider","initPolkadotJs","rpcUrl","provider","unwrapResultOrError","outcome","unwrapResultOrDefault","defaultValue","unwrappedResult","ContractPromise","registerDeployment","setDeployments","deployment","deployments","idx","contractId","registerDeployments","getDeployment","getDeploymentContract","createContext","useContext","useEffect","useState","jsx","UseInkathonErrorCode","UseInkathonProviderContext","useInkathon","context","UseInkathonProvider","children","appName","defaultChain","connectOnInit","_deployments","apiOptions","isConnecting","setIsConnecting","isConnected","setIsConnected","error","setError","activeChain","setActiveChain","setApi","setProvider","accounts","setAccounts","activeAccount","setActiveAccount","latestActiveAccount","setLatestActiveAccount","activeSigner","setActiveSigner","unsubscribeAccounts","setUnsubscribeAccounts","initialize","_chain","message","udpateSigner","web3FromSource","injector","signer","updateAccounts","injectedAccounts","newAccounts","newAccount","connect","web3AccountsSubscribe","web3Enable","extensions","unsubscribe","disconnect","switchActiveChain","useBalance","setFreeBalance","setReservedBalance","setBalance","setBalanceFormatted","setTokenSymbol","setTokenDecimals","useContract","setContract","useRegisteredContract","SubstrateWalletPlatform","polkadotjs","subwallet","talisman","nova","allSubstrateWallets","getSubstrateWallet","id","wallet"],"mappings":"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","sourcesContent":["/**\n * Substrate Chain Type\n */\nexport interface SubstrateChain {\n  network: string\n  name: string\n  rpcUrls: [string, ...string[]]\n  ss58Prefix?: number\n  explorerUrls?: string[]\n  testnet?: boolean\n  faucetUrls?: string[]\n}\n\n/**\n * Defined Substrate Chain Constants\n */\nexport const development: SubstrateChain = {\n  network: 'development',\n  name: 'Local Development',\n  ss58Prefix: 42,\n  rpcUrls: ['ws://127.0.0.1:9944'],\n  explorerUrls: [\n    'https://polkadot.js.org/apps/#/explorer?rpc=ws://127.0.0.1:9944',\n  ],\n  testnet: true,\n  faucetUrls: [\n    'https://polkadot.js.org/apps/#/accounts?rpc=ws://127.0.0.1:9944',\n  ],\n}\n\nexport const alephzeroTestnet: SubstrateChain = {\n  network: 'alephzero-testnet',\n  name: 'Aleph Zero Testnet',\n  ss58Prefix: 42,\n  rpcUrls: ['wss://ws.test.azero.dev'],\n  explorerUrls: ['https://azero.dev/?rpc=wss%3A%2F%2Fws.test.azero.dev'],\n  testnet: true,\n  faucetUrls: ['https://faucet.test.azero.dev'],\n}\n\nexport const rococo: SubstrateChain = {\n  network: 'rococo',\n  name: 'Rococo',\n  rpcUrls: ['wss://rococo-rpc.polkadot.io'],\n  testnet: true,\n  faucetUrls: ['https://matrix.to/#/#rococo-faucet:matrix.org'],\n  explorerUrls: ['https://rococo.subscan.io'],\n}\n\nexport const astar: SubstrateChain = {\n  network: 'astar',\n  name: 'Astar',\n  ss58Prefix: 5,\n  rpcUrls: ['wss://astar-rpc.dwellir.com'],\n  faucetUrls: [],\n  explorerUrls: ['https://astar.subscan.io'],\n}\n\nexport const shiden: SubstrateChain = {\n  network: 'shiden',\n  name: 'Shiden',\n  ss58Prefix: 5,\n  rpcUrls: ['wss://shiden-rpc.dwellir.com'],\n  explorerUrls: ['https://shiden.subscan.io'],\n}\n\nexport const shibuya: SubstrateChain = {\n  network: 'shibuya',\n  name: 'Shibuya Testnet',\n  testnet: true,\n  ss58Prefix: 5,\n  rpcUrls: ['wss://shibuya-rpc.dwellir.com'],\n  faucetUrls: ['https://portal.astar.network/#/shibuya-testnet/assets'],\n  explorerUrls: ['https://shibuya.subscan.io'],\n}\n\n/**\n * Exporting all chains separately\n */\nexport const allSubstrateChains: SubstrateChain[] = [\n  development,\n  alephzeroTestnet,\n  rococo,\n  astar,\n  shiden,\n  shibuya,\n]\n\n/**\n * Returns chain (if existent) for given identifier (`network` field).\n */\nexport const getSubstrateChain = (\n  networkId?: string,\n): SubstrateChain | undefined => {\n  return allSubstrateChains.find(\n    (chain) => chain.network.toLowerCase() === (networkId || '').toLowerCase(),\n  )\n}\n","import { InjectedAccountWithMeta } from '@polkadot/extension-inject/types'\n\n/**\n * Returns true if both given injected accounts have the same address.\n */\nexport const accountsAreEqual = (\n  a1?: InjectedAccountWithMeta,\n  a2?: InjectedAccountWithMeta,\n) => {\n  return (a1?.address || '').toLowerCase() === (a2?.address || '').toLowerCase()\n}\n\n/**\n * Returns true if both given arrays of injected accounts contain the\n * same objects with the same addresses in the same order.\n */\nexport const accountArraysAreEqual = (\n  a1: InjectedAccountWithMeta[],\n  a2: InjectedAccountWithMeta[],\n) => {\n  if (a1.length !== a2.length) return false\n  return a1.every((a, i) => accountsAreEqual(a, a2[i]))\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\nimport {\n  ContractCallOutcome,\n  ContractOptions,\n} from '@polkadot/api-contract/types'\nimport { EventRecord } from '@polkadot/types/interfaces'\nimport {\n  Callback,\n  IKeyringPair,\n  ISubmittableResult,\n} from '@polkadot/types/types'\nimport { BN, stringCamelCase } from '@polkadot/util'\nimport { decodeOutput } from './decodeOutput'\nimport { getAbiMessage } from './getAbiMessage'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Performs a dry run for the given contract method and arguments.\n * Is used within `contractQuery` & `contractTx` for gas estimation.\n */\nexport const contractCallDryRun = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  const abiMessage = getAbiMessage(contract, method)\n  const address = (account as IKeyringPair)?.address || account\n  const { value, gasLimit, storageDepositLimit } = options\n  const result = await api.call.contractsApi.call<ContractCallOutcome>(\n    address,\n    contract.address,\n    value ?? new BN(0),\n    gasLimit ?? null,\n    storageDepositLimit ?? null,\n    abiMessage.toU8a(args),\n  )\n\n  return result\n}\n\n/**\n * Calls a given non-mutating contract method (query) with maximum possible gas limit.\n */\nexport const contractQuery = async (\n  api: ApiPromise,\n  address: string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  // HACK: This should be possible by setting the `gasLimit` to null or -1 in the future.\n  const gasLimit = getMaxGasLimit(api)\n\n  // Call actual query/tx\n  const queryFn = contract.query[stringCamelCase(method)]\n  return await queryFn(address, { ...options, gasLimit }, ...args)\n}\n\n/**\n * Calls a given mutating contract method (tx) and wraps it in a promise.\n * Before, a dry run is performed to determine the required gas & potential errors.\n */\nexport type ContractTxResult = {\n  dryResult: ContractCallOutcome\n  result?: ISubmittableResult\n  errorMessage?: string | 'UserCancelled' | 'ExtrinsicFailed' | 'Error'\n  errorEvent?: EventRecord\n}\nexport const contractTx = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<ContractTxResult> => {\n  // Dry run to determine required gas and potential errors\n  delete options.gasLimit\n  const dryResult = await contractCallDryRun(\n    api,\n    account,\n    contract,\n    method,\n    options,\n    args,\n  )\n  const { isError, decodedOutput } = decodeOutput(dryResult, contract, method)\n  if (isError)\n    return Promise.reject({\n      dryResult,\n      errorMessage: decodedOutput || 'Error',\n    })\n\n  // Call actual query/tx & wrap it in a promise\n  const gasLimit = dryResult.gasRequired\n  return new Promise(async (resolve, reject) => {\n    const tx = contract.tx[stringCamelCase(method)](\n      { ...options, gasLimit },\n      ...args,\n    )\n    try {\n      const unsub = await tx.signAndSend(account, (result) => {\n        statusCb?.(result)\n        const isInBlock = result?.status?.isInBlock\n        if (!isInBlock) return\n        const errorEvent = result?.events.find(\n          ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n        )\n        if (isInBlock && errorEvent) {\n          // Reject if `ExtrinsicFailed` event was found\n          reject({\n            dryResult,\n            errorMessage: decodeOutput || 'ExtrinsicFailed',\n            errorEvent,\n          })\n          unsub?.()\n        } else if (isInBlock) {\n          // Otherwise resolve succesfully if transaction is in block\n          resolve({ dryResult, result })\n          unsub?.()\n        }\n      })\n    } catch (e) {\n      // Reject if user cancelled with `UserCancelled`\n      reject({ errorMessage: 'UserCancelled' })\n    }\n  })\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { stringCamelCase } from '@polkadot/util'\n\n/**\n * Returns the ABI message for the given method name within the given contract.\n */\nexport const getAbiMessage = (contract: ContractPromise, method: string) => {\n  const abiMessage = contract.abi.messages.find(\n    (m) => stringCamelCase(m.method) === stringCamelCase(method),\n  )\n  if (!abiMessage) {\n    throw new Error(`\"${method}\" not found in Contract`)\n  }\n  return abiMessage\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { ContractExecResult } from '@polkadot/types/interfaces'\nimport { AnyJson, TypeDef } from '@polkadot/types/types'\nimport { getAbiMessage } from './getAbiMessage'\n\n/**\n * Helper types & functions\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\ntype ContractResultErr = {\n  Err: AnyJson\n}\n\ninterface ContractResultOk {\n  Ok: AnyJson\n}\n\nfunction isErr(\n  o: ContractResultErr | ContractResultOk | AnyJson,\n): o is ContractResultErr {\n  return typeof o === 'object' && o !== null && 'Err' in o\n}\n\nfunction isOk(\n  o: ContractResultErr | ContractResultOk | AnyJson,\n): o is ContractResultOk {\n  return typeof o === 'object' && o !== null && 'Ok' in o\n}\n\nfunction getReturnTypeName(type: TypeDef | null | undefined) {\n  return type?.lookupName || type?.type || ''\n}\n\n/**\n * Decodes & unwraps outputs and errors of a given result, contract, and method.\n * Parsed error message can be found in `decodedOutput` if `isError` is true.\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\nexport function decodeOutput(\n  { result }: Pick<ContractExecResult, 'result' | 'debugMessage'>,\n  contract: ContractPromise,\n  method: string,\n): {\n  output: any\n  decodedOutput: string\n  isError: boolean\n} {\n  let output\n  let decodedOutput = ''\n  let isError = true\n\n  if (result.isOk) {\n    const flags = result.asOk.flags.toHuman()\n    isError = flags.includes('Revert')\n    const abiMessage = getAbiMessage(contract, method)\n    const returnType = abiMessage.returnType\n    const returnTypeName = getReturnTypeName(returnType)\n    const registry = contract.abi.registry\n    const r = returnType\n      ? registry.createTypeUnsafe(returnTypeName, [result.asOk.data]).toHuman()\n      : '()'\n    output = isOk(r) ? r.Ok : isErr(r) ? r.Err : r\n\n    const errorText = isErr(output)\n      ? typeof output.Err === 'object'\n        ? JSON.stringify(output.Err, null, 2)\n        : output.Err?.toString() ?? 'Error'\n      : output !== 'Ok'\n      ? output?.toString() || 'Error'\n      : 'Error'\n\n    const okText = isOk(r)\n      ? typeof output === 'object'\n        ? JSON.stringify(output, null, '\\t')\n        : output?.toString() ?? '()'\n      : JSON.stringify(output, null, '\\t') ?? '()'\n\n    decodedOutput = isError ? errorText : okText\n  }\n\n  return {\n    output,\n    decodedOutput,\n    isError,\n  }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport type { WeightV2 } from '@polkadot/types/interfaces'\nimport { BN, bnToBn } from '@polkadot/util'\n\n/**\n * Helper function that returns Weights V2 `gasLimit` object.\n */\nexport const getGasLimit = (\n  api: ApiPromise,\n  _refTime: string | BN,\n  _proofSize: string | BN,\n) => {\n  const refTime = bnToBn(_refTime)\n  const proofSize = bnToBn(_proofSize)\n\n  return api.registry.createType('WeightV2', {\n    refTime,\n    proofSize,\n  }) as WeightV2\n}\n\n/**\n * Helper function that returns the maximum gas limit Weights V2 object\n * for an extrinsiv based on the api chain constants.\n * NOTE: It's reduced by a given factor (defaults to 80%) to avoid storage exhaust.\n */\nexport const getMaxGasLimit = (api: ApiPromise, reductionFactor = 0.8) => {\n  const blockWeights = api.consts.system.blockWeights.toPrimitive() as any\n  const maxExtrinsic = blockWeights?.perClass?.normal?.maxExtrinsic\n  const maxRefTime = maxExtrinsic?.refTime\n    ? bnToBn(maxExtrinsic.refTime)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n  const maxProofSize = maxExtrinsic?.proofSize\n    ? bnToBn(maxExtrinsic.proofSize)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n\n  return getGasLimit(api, maxRefTime, maxProofSize)\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { CodePromise } from '@polkadot/api-contract'\nimport { ContractOptions } from '@polkadot/api-contract/types'\nimport { EventRecord } from '@polkadot/types/interfaces'\nimport { IKeyringPair } from '@polkadot/types/types'\nimport { stringCamelCase } from '@polkadot/util'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Uploads & instantiates a contract on-chain.\n */\nexport const deployContract = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  abi: any,\n  wasm: Uint8Array | string | Buffer,\n  constructorMethod = 'new',\n  args = [] as unknown[],\n  options = {} as ContractOptions,\n) => {\n  return new Promise<{ address: string; hash: string }>(\n    async (resolve, reject) => {\n      const code = new CodePromise(api, abi, wasm)\n      const gasLimit = getMaxGasLimit(api)\n      const constructorFn = code.tx[stringCamelCase(constructorMethod)]\n      const unsub = await constructorFn(\n        { gasLimit, ...options },\n        ...args,\n      ).signAndSend(account, ({ events, contract, status }: any) => {\n        if (status?.isInBlock) {\n          unsub?.()\n\n          const extrinsicFailedEvent = events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          ) as EventRecord\n          if (!!extrinsicFailedEvent || !contract?.address) {\n            console.error(\n              `Contract '${abi?.contract.name}' could not be deployed`,\n              extrinsicFailedEvent?.event?.data?.toHuman(),\n            )\n            return reject()\n          }\n\n          const hash = abi?.source.hash\n          const address = contract.address.toString()\n          console.log(`Contract '${abi?.contract.name}' deployed at ${address}`)\n\n          return resolve({\n            address,\n            hash,\n          })\n        }\n      })\n    },\n  )\n}\n","import { BN } from '@polkadot/util'\n\n/**\n * Formats the given `balance` (BN) to a string.\n */\nexport const formatBalance = (\n  balance: BN,\n  decimals: number,\n  maxFractionDigits = 2,\n): string => {\n  const balanceNormalized =\n    balance\n      .div(new BN(10).pow(new BN(decimals - maxFractionDigits - 1)))\n      .toNumber() /\n    10 ** (maxFractionDigits + 1)\n  const balanceFormatted = balanceNormalized.toLocaleString(undefined, {\n    maximumFractionDigits: maxFractionDigits,\n  })\n  return balanceFormatted\n}\n\n/**\n * Formats the given `balance` (BN) to a string with fixed number of decimals.\n */\nexport const formatBalanceToFixed = (\n  balance: BN,\n  decimals: number,\n  fractionDigits = 2,\n): string => {\n  const balanceNormalized =\n    balance\n      .div(new BN(10).pow(new BN(decimals - fractionDigits - 1)))\n      .toNumber() /\n    10 ** (fractionDigits + 1)\n  const balanceFormatted = balanceNormalized.toLocaleString(undefined, {\n    minimumFractionDigits: fractionDigits,\n    maximumFractionDigits: fractionDigits,\n  })\n  return balanceFormatted\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { formatBalanceToFixed } from './formatBalance'\n\n/**\n * Returns the native token balance of the given `address`.\n */\nexport const getBalance = async (\n  api: ApiPromise,\n  address: string | AccountId,\n  fractionDigits = 2,\n): Promise<{\n  freeBalance: BN\n  reservedBalance: BN\n  balance: BN\n  balanceFormatted: string\n  tokenSymbol: string\n  tokenDecimals: number\n}> => {\n  // Get the token decimals and symbol\n  const tokenDecimals = api.registry.chainDecimals?.[0] || 12\n  const tokenSymbol = api.registry.chainTokens?.[0] || 'Unit'\n\n  // Get the balance\n  const result: any = await api.query.system.account(address)\n  const freeBalance: BN = new BN(result?.data?.free || 0)\n  const reservedBalance: BN = new BN(result?.data?.reserved || 0)\n  const balance = reservedBalance.add(freeBalance)\n\n  // Format the balance\n  const balanceFormatted = formatBalanceToFixed(\n    balance,\n    tokenDecimals,\n    fractionDigits,\n  )\n\n  return {\n    freeBalance,\n    reservedBalance,\n    balance,\n    balanceFormatted,\n    tokenSymbol,\n    tokenDecimals,\n  }\n}\n","import { SubstrateChain } from '@chains'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { ApiOptions } from '@polkadot/api/types'\n\n/**\n * Helper to initialize polkadot.js API with given chain and options.\n */\nexport const initPolkadotJs = async (\n  chain: SubstrateChain,\n  options?: ApiOptions,\n): Promise<{ api: ApiPromise; provider: WsProvider | HttpProvider }> => {\n  const rpcUrl = chain.rpcUrls[0]\n  if (!rpcUrl) {\n    throw new Error('Given chain has no RPC url defined')\n  }\n\n  const provider = rpcUrl.startsWith('http')\n    ? new HttpProvider(rpcUrl)\n    : new WsProvider(rpcUrl)\n  const api = await ApiPromise.create({\n    provider,\n    ...options,\n  })\n\n  return { api, provider }\n}\n","import { ContractCallOutcome } from '@polkadot/api-contract/types'\n\n/**\n * Unwraps a Weights V2 result type or errors if there is no 'ok' value.\n */\nexport const unwrapResultOrError = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n): T => {\n  const { result, output } = outcome\n  if (!result?.isOk || !output) {\n    throw new Error(`Error while unwrapping: ${result.toString()}`)\n  }\n  return (output.toPrimitive() as { ok: T }).ok\n}\n\n/**\n * Unwraps a Weights V2 result type or returns the given default if there is no 'ok' value.\n */\nexport const unwrapResultOrDefault = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n  defaultValue: T,\n): T => {\n  const { result, output } = outcome\n  let unwrappedResult: T = defaultValue\n  if (result?.isOk && !!output) {\n    unwrappedResult = (output.toPrimitive() as { ok: T }).ok\n  }\n  return unwrappedResult\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { Abi, ContractPromise } from '@polkadot/api-contract'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { Dispatch, SetStateAction } from 'react'\n\n/**\n * Substrate Deployment\n */\nexport interface SubstrateDeployment {\n  contractId: string\n  networkId: string\n  abi: string | Record<string, unknown> | Abi\n  address: string | AccountId\n}\n\n/**\n * Registering the given `deployment` with the given `setDeployments` dispatcher.\n * The registry is kept unique, so if there is already one deployment with\n * equal `contractId` and `networkId` it will be replaced.\n */\nexport const registerDeployment = (\n  setDeployments: Dispatch<SetStateAction<SubstrateDeployment[]>>,\n  deployment: SubstrateDeployment,\n) => {\n  setDeployments((deployments) => {\n    // Check if deployment already exists & remove\n    const idx = deployments.findIndex(\n      ({ contractId, networkId }) =>\n        contractId.toLowerCase() === deployment.contractId.toLowerCase() &&\n        networkId.toLowerCase() === deployment.networkId.toLowerCase(),\n    )\n    if (idx >= 0) deployments.splice(idx, 1)\n\n    // Add new deployment\n    return [...deployments, deployment]\n  })\n}\n\n/**\n * Registers all given `deployments` via `registerDeployment` after awaiting the promise.\n */\nexport const registerDeployments = async (\n  setDeployments: Dispatch<SetStateAction<SubstrateDeployment[]>>,\n  deployments: Promise<SubstrateDeployment[]>,\n) => {\n  ;(await deployments).forEach((deployment) =>\n    registerDeployment(setDeployments, deployment),\n  )\n}\n\n/**\n * Returns the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId`\n */\nexport const getDeployment = (\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  return deployments.find((deployment) => {\n    return (\n      deployment.contractId.toLowerCase() === contractId.toLowerCase() &&\n      deployment.networkId.toLowerCase() === (networkId || '').toLowerCase()\n    )\n  })\n}\n\n/**\n * Takes the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId` and creates a `ContractPromise`.\n */\nexport const getDeploymentContract = (\n  api: ApiPromise,\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  if (!api) return undefined\n  const deployment = getDeployment(deployments || [], contractId, networkId)\n  if (!deployment) return undefined\n  return new ContractPromise(api, deployment?.abi, deployment?.address)\n}\n","import { accountArraysAreEqual, accountsAreEqual } from '@helpers'\nimport { initPolkadotJs } from '@helpers/initPolkadotJs'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { ApiOptions } from '@polkadot/api/types'\nimport {\n  InjectedAccountWithMeta,\n  Unsubcall,\n} from '@polkadot/extension-inject/types'\nimport { Signer } from '@polkadot/types/types'\nimport { registerDeployments, SubstrateDeployment } from '@registry'\nimport {\n  createContext,\n  Dispatch,\n  FC,\n  PropsWithChildren,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport { getSubstrateChain, SubstrateChain } from './chains'\n\n/**\n * Helper Types\n */\nexport enum UseInkathonErrorCode {\n  InitializationError,\n  NoSubstrateExtensionDetected,\n  NoAccountInjected,\n}\nexport interface UseInkathonError {\n  code: UseInkathonErrorCode\n  message: string\n}\n\n/**\n * UseInkathon Context Type\n */\nexport type UseInkathonProviderContextType = {\n  isConnecting?: boolean\n  isConnected?: boolean\n  error?: UseInkathonError\n  activeChain?: SubstrateChain\n  switchActiveChain?: (chain: SubstrateChain) => Promise<void>\n  api?: ApiPromise\n  provider?: WsProvider | HttpProvider\n  connect?: () => Promise<void>\n  disconnect?: () => void\n  accounts?: InjectedAccountWithMeta[]\n  activeAccount?: InjectedAccountWithMeta\n  activeSigner?: Signer\n  setActiveAccount?: Dispatch<\n    SetStateAction<InjectedAccountWithMeta | undefined>\n  >\n  deployments?: SubstrateDeployment[]\n}\nexport const UseInkathonProviderContext =\n  createContext<UseInkathonProviderContextType | null>(null)\n\n/**\n * Primary useInkathon hook that exposes `UseInkathonProviderContext`.\n */\nexport const useInkathon = () => {\n  const context = useContext(UseInkathonProviderContext)\n\n  if (!context)\n    throw new Error('useInkathon must be used within a UseInkathonProvider')\n\n  return context\n}\n\n/**\n * Primary useInkathon provider that needs to be wrapped around the app\n * (see documentation) to use `useInkathon` and other hooks anywhere.\n */\nexport interface UseInkathonProviderProps extends PropsWithChildren {\n  appName: string\n  defaultChain: SubstrateChain | SubstrateChain['network']\n  connectOnInit?: boolean\n  deployments?: Promise<SubstrateDeployment[]>\n  apiOptions?: ApiOptions\n}\nexport const UseInkathonProvider: FC<UseInkathonProviderProps> = ({\n  children,\n  appName,\n  defaultChain,\n  connectOnInit,\n  deployments: _deployments,\n  apiOptions,\n}) => {\n  // Check if default chain was provided\n  if (\n    !defaultChain ||\n    (typeof defaultChain === 'string' &&\n      getSubstrateChain(defaultChain) === undefined)\n  ) {\n    throw new Error(\n      'None or invalid `defaultChain` provided with `UseInkathonProvider`. Forgot to set environment variable?',\n    )\n  }\n\n  // Setup state variables\n  const [isConnecting, setIsConnecting] = useState(connectOnInit)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useState<UseInkathonError | undefined>()\n  const [activeChain, setActiveChain] = useState<SubstrateChain>(\n    (typeof defaultChain === 'string'\n      ? getSubstrateChain(defaultChain)\n      : defaultChain) as SubstrateChain,\n  )\n  const [api, setApi] = useState<ApiPromise>()\n  const [provider, setProvider] = useState<WsProvider | HttpProvider>()\n  const [accounts, setAccounts] = useState<InjectedAccountWithMeta[]>([])\n  const [activeAccount, setActiveAccount] = useState<InjectedAccountWithMeta>()\n  const [latestActiveAccount, setLatestActiveAccount] =\n    useState<InjectedAccountWithMeta>()\n  const [activeSigner, setActiveSigner] = useState<Signer>()\n  const [unsubscribeAccounts, setUnsubscribeAccounts] = useState<Unsubcall>()\n  const [deployments, setDeployments] = useState<SubstrateDeployment[]>([])\n\n  // Register given deployments\n  useEffect(() => {\n    if (_deployments) registerDeployments(setDeployments, _deployments)\n  }, [])\n\n  // Initialize polkadot-js/api\n  const initialize = async (chain?: SubstrateChain) => {\n    setIsConnected(false)\n    setError(undefined)\n\n    try {\n      const _chain = chain || activeChain\n      const { api, provider } = await initPolkadotJs(_chain, {\n        noInitWarn: true,\n        throwOnConnect: true,\n        ...apiOptions,\n      })\n      setProvider(provider)\n      setApi(api)\n\n      // Update active chain if switching\n      if (activeChain.network !== _chain.network) setActiveChain(_chain)\n    } catch (e) {\n      const message = 'Error while initializing polkadot.js api'\n      console.error(message, e)\n      setError({ code: UseInkathonErrorCode.InitializationError, message })\n      setIsConnecting(false)\n      setApi(undefined)\n      setProvider(undefined)\n    }\n  }\n\n  // Update signer when account changes\n  const udpateSigner = async () => {\n    await api?.isReadyOrError\n    if (!activeAccount?.meta?.source || !api) {\n      setActiveSigner(undefined)\n      api?.setSigner(undefined as any)\n      return\n    }\n\n    try {\n      // NOTE: Dynamic import  to prevent hydration error in SSR environments\n      const { web3FromSource } = await import('@polkadot/extension-dapp')\n      const injector = await web3FromSource(activeAccount.meta.source)\n      const signer = injector?.signer\n      setActiveSigner(signer)\n      api.setSigner(signer)\n    } catch (e) {\n      console.error('Error while setting signer:', e)\n      setActiveSigner(undefined)\n      api.setSigner(undefined as any)\n    }\n  }\n  useEffect(() => {\n    udpateSigner()\n  }, [api, activeAccount])\n\n  // Updates account list and active account\n  const updateAccounts = (injectedAccounts: InjectedAccountWithMeta[]) => {\n    const newAccounts = injectedAccounts || []\n    // Find active account in new accounts or fallback to first account\n    const newAccount =\n      newAccounts.find((a) => accountsAreEqual(a, latestActiveAccount)) ||\n      newAccounts?.[0]\n\n    // Update accounts and active account\n    if (!accountArraysAreEqual(accounts, newAccounts)) {\n      setAccounts(() => newAccounts)\n    }\n    if (!accountsAreEqual(activeAccount, newAccount)) {\n      setActiveAccount(() => newAccount)\n    }\n    setIsConnected(!!newAccount)\n  }\n  useEffect(() => {\n    if (\n      activeAccount &&\n      !accountsAreEqual(activeAccount, latestActiveAccount)\n    ) {\n      setLatestActiveAccount(() => activeAccount)\n    }\n  }, [activeAccount])\n\n  // Connect to injected wallets via polkadot-js/extension-dapp\n  const connect = async (chain?: SubstrateChain) => {\n    setError(undefined)\n    setIsConnecting(true)\n    setIsConnected(false)\n\n    // Make sure api is initialized & connected to provider\n    if (!api?.isConnected || (chain && chain.network !== activeChain.network)) {\n      await initialize(chain)\n    }\n\n    try {\n      // NOTE: Dynamic import  to prevent hydration error in SSR environments\n      const { web3AccountsSubscribe, web3Enable } = await import(\n        '@polkadot/extension-dapp'\n      )\n\n      // Initialize web3 extension\n      const extensions = await web3Enable(appName)\n      if (!extensions?.length) {\n        const message = 'No Substrate-compatible extension detected'\n        setError({\n          code: UseInkathonErrorCode.NoSubstrateExtensionDetected,\n          message,\n        })\n        throw new Error(message)\n      }\n\n      // Query & keep listening to injected accounts\n      unsubscribeAccounts?.()\n      const unsubscribe = await web3AccountsSubscribe(updateAccounts)\n      setUnsubscribeAccounts(unsubscribe)\n    } catch (e: any) {\n      console.error('Error while connecting wallet:', e)\n    } finally {\n      setIsConnecting(false)\n    }\n  }\n\n  // Disconnect\n  const disconnect = async () => {\n    await api?.disconnect()\n    setIsConnected(false)\n    setIsConnecting(false)\n    updateAccounts([])\n    unsubscribeAccounts?.()\n    setUnsubscribeAccounts(undefined)\n  }\n\n  // Initialze\n  useEffect(() => {\n    connectOnInit ? connect() : initialize()\n    return () => {\n      unsubscribeAccounts?.()\n    }\n  }, [])\n\n  // Switch active chain\n  const switchActiveChain = async (chain: SubstrateChain) => {\n    await connect(chain)\n  }\n\n  return (\n    <UseInkathonProviderContext.Provider\n      value={{\n        isConnecting,\n        isConnected,\n        error,\n        activeChain,\n        switchActiveChain,\n        api,\n        provider,\n        connect,\n        disconnect,\n        accounts,\n        activeAccount,\n        activeSigner,\n        setActiveAccount,\n        deployments,\n      }}\n    >\n      {children}\n    </UseInkathonProviderContext.Provider>\n  )\n}\n","import { getBalance } from '@helpers/getBalance'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { useInkathon } from '@provider'\nimport { useEffect, useState } from 'react'\n\n/**\n * Hook that returns the native token balance of the given `address`.\n */\nexport const useBalance = (\n  address?: string | AccountId,\n  fractionDigits = 2,\n) => {\n  const { api } = useInkathon()\n  const [freeBalance, setFreeBalance] = useState<BN>()\n  const [reservedBalance, setReservedBalance] = useState<BN>()\n  const [balance, setBalance] = useState<BN>()\n  const [balanceFormatted, setBalanceFormatted] = useState<string>()\n  const [tokenSymbol, setTokenSymbol] = useState<string>()\n  const [tokenDecimals, setTokenDecimals] = useState<number>()\n\n  useEffect(() => {\n    ;(async () => {\n      if (!api || !address) {\n        setFreeBalance(undefined)\n        setReservedBalance(undefined)\n        setBalance(undefined)\n        setBalanceFormatted(undefined)\n        setTokenSymbol(undefined)\n        setTokenDecimals(undefined)\n        return\n      }\n\n      const result = await getBalance(api, address, fractionDigits)\n\n      setFreeBalance(result.freeBalance)\n      setReservedBalance(result.reservedBalance)\n      setBalance(result.balance)\n      setBalanceFormatted(`${result.balanceFormatted} ${result.tokenSymbol}`)\n      setTokenSymbol(result.tokenSymbol)\n      setTokenDecimals(result.tokenDecimals)\n    })()\n  }, [api, address, fractionDigits])\n\n  return {\n    freeBalance,\n    reservedBalance,\n    balance,\n    balanceFormatted,\n    tokenSymbol,\n    tokenDecimals,\n  }\n}\n","import { Abi, ContractPromise } from '@polkadot/api-contract'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { useInkathon } from '@provider'\nimport { useEffect, useState } from 'react'\n\n/**\n * React Hook that returns a `ContractPromise` object configured with\n * the active api & chain as well as the given `abi` and `address`.\n */\nexport const useContract = (\n  abi?: string | Record<string, unknown> | Abi,\n  address?: string | AccountId,\n) => {\n  const { api, isConnecting } = useInkathon()\n  const [contract, setContract] = useState<ContractPromise | undefined>()\n\n  const initialize = async () => {\n    if (isConnecting || !api || !abi || !address) {\n      setContract(undefined)\n      return\n    }\n    const contract = new ContractPromise(api, abi, address)\n    setContract(contract)\n  }\n  useEffect(() => {\n    initialize()\n  }, [api, isConnecting, abi, address])\n\n  return {\n    contract,\n    address,\n  }\n}\n","import { useInkathon } from '@provider'\nimport { getDeployment } from '@registry'\nimport { useContract } from './useContract'\n\n/**\n * React Hook that returns a `ContractPromise` object configured with\n * the active api & chain as well as the given deployment contract id\n * which is looked up from the deployments registry.\n */\nexport const useRegisteredContract = (\n  contractId: string,\n  networkId?: string,\n) => {\n  const { deployments, activeChain } = useInkathon()\n  networkId = networkId || activeChain?.network || ''\n  const deployment = getDeployment(deployments || [], contractId, networkId)\n  return useContract(deployment?.abi, deployment?.address)\n}\n","/**\n * Substrate Wallet Type(s)\n */\nexport interface SubstrateWallet {\n  id: string\n  name: string\n  platforms: [SubstrateWalletPlatform, ...SubstrateWalletPlatform[]]\n  urls: {\n    website: string\n    chromeExtension?: string\n    firefoxExtension?: string\n    iosApp?: string\n    androidApp?: string\n  }\n  logoUrls: [string, ...string[]]\n}\nexport enum SubstrateWalletPlatform {\n  Browser = 'browser',\n  Android = 'android',\n  iOS = 'ios',\n}\n\n/**\n * Defined Substrate Wallet Constants\n */\nexport const polkadotjs: SubstrateWallet = {\n  id: 'polkadot-js',\n  name: 'Polkadot{.js}',\n  platforms: [SubstrateWalletPlatform.Browser],\n  urls: {\n    website: 'https://polkadot.js.org/extension/',\n    chromeExtension:\n      'https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd',\n    firefoxExtension:\n      'https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension/',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/polkadot@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/polkadot@512w.png',\n  ],\n}\n\nexport const subwallet: SubstrateWallet = {\n  id: 'subwallet',\n  name: 'SubWallet',\n  platforms: [SubstrateWalletPlatform.Browser],\n  urls: {\n    website: 'https://subwallet.app/',\n    chromeExtension:\n      'https://chrome.google.com/webstore/detail/subwallet-polkadot-extens/onhogfjeacnfoofkfgppdlbmlmnplgbn',\n    firefoxExtension:\n      'https://addons.mozilla.org/en-US/firefox/addon/subwallet/',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/subwallet@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/subwallet@512w.png',\n  ],\n}\n\nexport const talisman: SubstrateWallet = {\n  id: 'talisman',\n  name: 'Talisman',\n  platforms: [SubstrateWalletPlatform.Browser],\n  urls: {\n    website: 'https://www.talisman.xyz/',\n    chromeExtension:\n      'https://chrome.google.com/webstore/detail/talisman-polkadot-wallet/fijngjgcjhjmmpcmkeiomlglpeiijkld',\n    firefoxExtension:\n      'https://addons.mozilla.org/en-US/firefox/addon/talisman-wallet-extension/',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/talisman@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/talisman@512w.png',\n  ],\n}\n\nexport const nova: SubstrateWallet = {\n  id: 'nova',\n  name: 'Nova Wallet',\n  platforms: [SubstrateWalletPlatform.Android, SubstrateWalletPlatform.iOS],\n  urls: {\n    website: 'https://novawallet.io/',\n    androidApp:\n      'https://play.google.com/store/apps/details?id=io.novafoundation.nova.market',\n    iosApp:\n      'https://apps.apple.com/app/nova-polkadot-kusama-wallet/id1597119355',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/nova@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/nova@512w.png',\n  ],\n}\n\n/**\n * Exporting all wallets separately\n */\nexport const allSubstrateWallets: SubstrateWallet[] = [\n  polkadotjs,\n  subwallet,\n  talisman,\n  nova,\n]\n\n/**\n * Returns wallet (if existent) for given identifier (`id` field).\n */\nexport const getSubstrateWallet = (id: string): SubstrateWallet | undefined => {\n  return allSubstrateWallets.find(\n    (wallet) => wallet.id.toLowerCase() === id.toLowerCase(),\n  )\n}\n"]}