'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (args) {
    var _this = this;

    var wechatCtl = args.wechatCtl,
        host = args.host,
        branch = args.branch;


    var PORT = args.port || process.env.PORT || 8008;
    var cmder = args.cmder;

    var app = websockify(new Koa());
    // const app = new Koa();

    app.use(bodyParser());

    app.use(function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ctx, next) {
            var request, msg, _msg, id, shellP, headers, gitEvent, pushData, commitObj, pusher, commitMsg, diffMsg, _msg2, _msg3;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            request = ctx.request;
                            // body = ctx.request.body;

                            if (!(ctx.request.url === "/restart")) {
                                _context.next = 13;
                                break;
                            }

                            if (!cmder.stop.isStoping()) {
                                _context.next = 6;
                                break;
                            }

                            ctx.body = '{"msg": "服务器正在重启"}';
                            _context.next = 11;
                            break;

                        case 6:
                            ctx.body = '{"msg": "服务器重启"}';
                            _context.next = 9;
                            return cmder.stop();

                        case 9:
                            _context.next = 11;
                            return cmder.start();

                        case 11:

                            if (wechatCtl) {
                                msg = ctx.body;

                                wechatCtl.sendMsg(msg, wechatTo);
                            }

                            return _context.abrupt('return');

                        case 13:
                            if (!ctx.request.url.startsWith("/exec")) {
                                _context.next = 18;
                                break;
                            }

                            console.log(ctx.request.query);
                            _msg = Object.assign({}, ctx.request.body, ctx.request.query);

                            if (_msg.shell) {
                                id = new Date().getTime();
                                shellP = cmder.exec(_msg.shell, id);

                                ctx.body = '{"id": "' + id + '"}';
                            } else {
                                ctx.body = '{"msg": "参数错误，缺少shell参数"}';
                            }
                            return _context.abrupt('return');

                        case 18:
                            if (!ctx.request.url.startsWith("/hook")) {
                                _context.next = 26;
                                break;
                            }

                            headers = JSON.parse(JSON.stringify(ctx.request.header).toLowerCase());
                            gitEvent = headers['x-github-event'] || headers['x-gitlab-event'];

                            gitEvent = gitEvent && gitEvent.replace('hook', '').trim();
                            console.log(ctx.request.body);
                            if (gitEvent === 'push') {
                                if (wechatCtl) {
                                    pushData = ctx.request.body.payload ? JSON.parse(ctx.request.body.payload) : ctx.request.body;
                                    commitObj = pushData.head_commit || pushData.commits[pushData.commits.length - 1];
                                    pusher = pushData.user_name || commitObj.author.name;
                                    commitMsg = commitObj.message;
                                    diffMsg = '';

                                    if (commitObj.added && commitObj.added.length) {
                                        diffMsg += "添加文件：" + commitObj.added.join(' , ') + '\n';
                                    }
                                    if (commitObj.modified && commitObj.modified.length) {
                                        diffMsg += "修改文件：" + commitObj.modified.join(' , ') + '\n';
                                    }
                                    if (commitObj.commitMsg && commitObj.commitMsg.length) {
                                        diffMsg += "删除文件：" + commitObj.commitMsg.join(' , ') + '\n';
                                    }

                                    _msg2 = pusher + ' \u63D0\u4EA4\u4FEE\u6539\u5230 ' + branch + ' \u5206\u652F\uFF0C\u6587\u4EF6\u53D8\u52A8\u5982\u4E0B\n\n' + diffMsg + '\n\u63D0\u4EA4\u7684\u6CE8\u91CA\uFF1A' + commitMsg + '\n\n\u670D\u52A1\u5668\u5DF2\u7ECF\u81EA\u52A8pull\u4E86\u4EE3\u7801\u3002\n\u9884\u89C8\u5730\u5740: http://' + (host === '0.0.0.0' ? '{服务器ip}' : host) + '\n\u5982\u679C\u6B64\u6B21\u4FEE\u6539\u4E0D\u652F\u6301\u70ED\u66F4\u65B0\uFF0C\u53EF\u4EE5\u6253\u5F00 http://' + (host === '0.0.0.0' ? '{服务器ip}' : 'ctrl.' + host) + ' \u91CD\u542F\u670D\u52A1\n            ';

                                    wechatCtl.sendMsg(_msg2, wechatTo);
                                }
                                cmder.pull();
                            }
                            ctx.body = '{"msg": "client收到hook请求"}';
                            return _context.abrupt('return');

                        case 26:
                            if (!(wechatCtl && ctx.request.url == "/notice")) {
                                _context.next = 32;
                                break;
                            }

                            _msg3 = ctx.request.body;

                            _msg3 = JSON.stringify(_msg3);
                            wechatCtl.sendMsg(_msg3);
                            ctx.body = '{"msg": "消息转发微信"}';
                            return _context.abrupt('return');

                        case 32:
                            _context.next = 34;
                            return next();

                        case 34:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }());

    app.use(serve(path.join(__dirname, '../public')));

    var redirect = function redirect(ctx) {
        ctx.response.redirect('/index.html');
        ctx.response.body = '<a href="/index.html">Index Page</a>';
    };

    app.use(route.get('/', redirect));

    global.app = app;

    app.listen(PORT);

    function broadcast(data) {
        app.ws.server.clients.forEach(function each(client) {
            if (client.readyState === 1) {
                client.send(JSON.stringify(data));
            }
        });
    };

    return {
        boardcast: function boardcast(type, id, data) {
            if (type.startsWith('start')) {
                broadcast({
                    type: type,
                    data: data
                });
                // console.log(type, data);
            }
            if (type.startsWith('exec')) {
                // console.log(type + '#' + id, data);
                broadcast({
                    type: type,
                    id: id,
                    data: data
                });
            }
        }
    };
};

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Koa = require('koa');
var path = require('path');
var serve = require('koa-static');
var route = require('koa-route');
var bodyParser = require('koa-bodyparser');
var websockify = require('koa-websocket');

// "devDependencies": {
//   "babel-plugin-syntax-async-functions": "^6.13.0",
//   "babel-plugin-transform-async-to-generator": "^6.24.1",
//   "babel-preset-es2015": "^6.24.1",
//   "babel-preset-stage-2": "^6.24.1",
//   "babel-register": "^6.26.0"
// }

//  {
//    "presets": [
//      "es2015",
//      "stage-3"
//    ],
//    "plugins": ["syntax-async-generators","transform-async-to-generator","syntax-async-functions","transform-koa2-async-to-generator"]
// }
var wechatTo = process.env.WECHAT_TO || 'Wayne';