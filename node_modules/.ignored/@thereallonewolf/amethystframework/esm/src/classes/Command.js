import { ApplicationCommandOptionTypes, ChannelTypes } from '../../deps.js';
import { validateRequiredParameters } from './Validations.js';
const defaultFunction = (bot, ctx) => {
};
/* It creates a class called Command. */
export class CommandClass {
    /**
     * It takes in a CommandOptions object and a client object, and then sets the properties of the
     * Command object to the properties of the CommandOptions object
     * @param {CommandOptions} options - CommandOptions - The options for the command.
     * @param {AmethystBot} client - AmethystBot - The client object
     */
    constructor(options, client) {
        /* Name of the command */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* Information about the command */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* Category the command belongs to. */
        Object.defineProperty(this, "category", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* Arguments to be passed to the command */
        Object.defineProperty(this, "args", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* Alternate names for this command */
        Object.defineProperty(this, "aliases", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* Type of command */
        Object.defineProperty(this, "commandType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**The command cooldown*/
        Object.defineProperty(this, "cooldown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**Whether the command is allowed to run in non-nsfw channels*/
        Object.defineProperty(this, "nsfw", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**Whether the command can only be used by the bot's owners*/
        Object.defineProperty(this, "ownerOnly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**The channel permissions needed by the member to execute the command*/
        Object.defineProperty(this, "userChannelPermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**The guild permissions needed by the member to execute the command*/
        Object.defineProperty(this, "userGuildPermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**The channel permissions needed by the bot to execute the command*/
        Object.defineProperty(this, "botChannelPermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**The guild permissions needed by the bot to execute the command*/
        Object.defineProperty(this, "botGuildPermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**If the command can only be used in guilds*/
        Object.defineProperty(this, "guildOnly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**If the command can only be used in dms*/
        Object.defineProperty(this, "dmOnly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The command scope
         * @default "global" */
        Object.defineProperty(this, "scope", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**A list of guild ids that will have the command*/
        Object.defineProperty(this, "guildIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "quotedArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**Ignore bots when they try to use the command*/
        Object.defineProperty(this, "ignoreBots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "extras", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* Mention slash command in chat */
        Object.defineProperty(this, "mention", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "private", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "execute", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = options.name;
        this.description = options.description;
        this.category = options.category;
        this.args = options.args ?? [];
        this.aliases = options.aliases ?? [];
        this.commandType = options.commandType;
        this.cooldown = options.cooldown ?? client.defaultCooldown;
        this.userChannelPermissions = options.userChannelPermissions ?? [];
        this.userGuildPermissions = options.userGuildPermissions ?? [];
        this.botChannelPermissions = options.botChannelPermissions ?? [];
        this.botGuildPermissions = options.botGuildPermissions ?? [];
        this.guildOnly = options.guildOnly ?? true;
        this.dmOnly = options.dmOnly ?? true;
        this.scope = options.scope ?? "global";
        this.guildIds = options.guildIds ?? [];
        this.quotedArguments = options.quotedArguments ?? false;
        this.ignoreBots = options.ignoreBots ?? true;
        this.nsfw = options.nsfw ?? false;
        this.ownerOnly = options.ownerOnly ?? false;
        this.execute = options.execute ?? defaultFunction;
        this.extras = options.extras ?? {};
        this.private = options.private ?? false;
    }
    /**
     * If the command type is not an application command, return a default object. Otherwise, return the
     * command object with the options mapped to the correct types
     * @returns An object with the following properties:
     */
    toApplicationCommand() {
        if (!this.commandType.includes("application"))
            return {
                type: -99,
                name: this.name,
                description: this.description,
            };
        validateRequiredParameters(this.name, this.description, this.args?.length
            ? this.args.map((e) => {
                return {
                    ...e,
                    description: e.description ?? "A slash command option",
                    channelTypes: e.channelTypes?.map((f) => typeof f == "string" ? ChannelTypes[f] : f),
                    type: typeof e.type == "number"
                        ? e.type
                        : ApplicationCommandOptionTypes[e.type],
                };
            })
            : []);
        return {
            type: 1,
            name: this.name,
            description: this.description,
            options: this.args?.length
                ? this.args.map((e) => {
                    return {
                        ...e,
                        description: e.description ?? "A slash command option",
                        channelTypes: e.channelTypes?.map((f) => typeof f == "string" ? ChannelTypes[f] : f),
                        type: typeof e.type == "number"
                            ? e.type
                            : ApplicationCommandOptionTypes[e.type],
                    };
                })
                : [],
        };
    }
    /**
     * It updates the command's properties with the options passed in
     * @param {CommandOptions} options - CommandOptions - The options object that is passed to the
     * constructor.
     * @param {AmethystBot} client - AmethystBot - The client that the command is being registered to.
     */
    update(options, client) {
        this.name = options.name;
        this.description = options.description;
        this.category = options.category;
        this.args = options.args ?? [];
        this.aliases = options.aliases ?? [];
        this.commandType = options.commandType;
        this.cooldown = options.cooldown ?? client.defaultCooldown;
        this.userChannelPermissions = options.userChannelPermissions ?? [];
        this.userGuildPermissions = options.userGuildPermissions ?? [];
        this.botChannelPermissions = options.botChannelPermissions ?? [];
        this.botGuildPermissions = options.botGuildPermissions ?? [];
        this.guildOnly = options.guildOnly ?? true;
        this.dmOnly = options.dmOnly ?? false;
        this.scope = options.scope ?? "global";
        this.guildIds = options.guildIds ?? [];
        this.quotedArguments = options.quotedArguments ?? false;
        this.ignoreBots = options.ignoreBots ?? true;
        this.nsfw = options.nsfw ?? false;
        this.ownerOnly = options.ownerOnly ?? false;
        this.execute = options.execute ?? defaultFunction;
        this.private = options.private ?? false;
    }
}
