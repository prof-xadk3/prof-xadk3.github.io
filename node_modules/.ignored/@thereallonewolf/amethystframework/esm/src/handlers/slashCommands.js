import { InteractionResponseTypes } from '../../deps.js';
import { createContext } from '../classes/Context.js';
import { ErrorEnums } from '../interfaces/errors.js';
import { createOptionResults } from '../utils/createOptionResults.js';
/**
 * It handles the slash command
 * @param {AmethystBot} bot - AmethystBot - The bot instance
 * @param {Interaction} data - Interaction
 * @returns The data object
 */
export async function handleSlash(bot, data) {
    if (data.type !== 2 || !data.data?.name) {
        return;
    }
    let command;
    for (let i = 0; i < bot.category.size; i++) {
        command = bot.category
            .at(i)
            ?.getCommandFromInteraction(data.data.name, data.data.options[0].name);
        if (command)
            break;
    }
    if (!command)
        return;
    if (command.private) {
        bot.helpers.sendInteractionResponse(data.id, data.token, {
            type: InteractionResponseTypes.DeferredUpdateMessage,
            data: { flags: 1 << 6 },
        });
    }
    else {
        bot.helpers.sendInteractionResponse(data.id, data.token, {
            type: InteractionResponseTypes.DeferredChannelMessageWithSource,
        });
    }
    const context = await createContext({
        interaction: { ...data, data: data.data.options?.[0] },
    }, createOptionResults(bot, command.args || [], {
        interaction: data,
    }), command, bot);
    for (let i = 0; i < bot.inhibitors.size; i++) {
        const e = bot.inhibitors.at(i);
        const f = await e(bot, command, context);
        if (typeof f != "boolean") {
            return bot.events.commandError?.(bot, {
                data,
                error: f,
            }, context);
        }
    }
    try {
        bot.events.commandStart?.(bot, command, data);
        await command.execute(bot, context);
        bot.events.commandEnd?.(bot, command, data);
    }
    catch (e) {
        if (bot.events.commandError) {
            bot.events.commandError(bot, {
                error: { type: ErrorEnums.COMMANDRUNTIME },
                data,
            }, context);
        }
        else
            throw e;
    }
}
