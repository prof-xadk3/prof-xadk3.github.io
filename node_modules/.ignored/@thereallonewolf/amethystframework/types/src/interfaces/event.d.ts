import { Bot, Interaction, Message } from '../../deps.js';
import { BotWithProxyEvents } from '../cache-with-proxy/events.js';
import { CommandClass } from '../classes/Command.js';
import { Context } from '../classes/Context.js';
import { AmethystBot } from './bot.js';
import { AmethystError } from './errors.js';
export type Events = {
    [K in keyof BotWithProxyEvents]: BotWithProxyEvents[K] extends (bot: infer T, ...rest: infer R) => infer U ? Bot extends T ? (bot: Bot, ...rest: R) => U : (...rest: Parameters<BotWithProxyEvents[K]>) => U : never;
};
export interface AmethystEvents extends Events {
    commandError(bot: AmethystBot, data: {
        error: AmethystError & {
            error?: Error;
        };
        data?: Interaction;
        message?: Message;
    }, context: Context): unknown;
    commandNotFound(bot: AmethystBot, message: Message, commandName: string): unknown;
    commandStart<E extends CommandClass = CommandClass>(bot: AmethystBot, command: E, dataOrMessage: Interaction | Message): unknown;
    commandEnd<E extends CommandClass = CommandClass>(bot: AmethystBot, command: E, dataOrMessage: Interaction | Message): unknown;
}
export interface AmethystEvent<T extends keyof AmethystEvents> {
    name: T;
    execute(...args: [...Parameters<AmethystEvents[T]>]): unknown;
    botCacheNumber?: number;
}
