import { CreateApplicationCommand } from '../../deps.js';
import { AmethystCollection, CommandClass } from '../../mod.js';
import { CategoryOptions } from '../types/categoryOptions.js';
export default class CategoryClass {
    name: string;
    description: string;
    uniqueCommands: boolean;
    default: string;
    commands: AmethystCollection<string, CommandClass>;
    /**
     * It's a constructor for the Category class
     * @param {CategoryOptions} options - CategoryOptions
     */
    constructor(options: CategoryOptions);
    /**
     * It takes an object with the same properties as the class, and updates the class with the values of
     * the object
     * @param {CategoryOptions} options - CategoryOptions
     */
    update(options: CategoryOptions): void;
    /**
     * This function takes the commands that are in the scope of the guild and returns them as an object.
     * @returns The return is a CreateApplicationCommand.
     */
    toGuildApplicationCommand(): CreateApplicationCommand;
    /**
     * It takes a list of commands, filters out the ones that are not global, then maps them to an
     * application command, then filters out the ones that are not of type 0.
     * I'm not sure what the options is, but I'm guessing it's an array.
     * @returns The return value is an object with the name, description, and options properties.
     */
    toApplicationCommand(): {
        name: string;
        description: string;
        options: import("discordeno/types/transformers/applicationCommandOption.js").ApplicationCommandOption[];
    };
    /**
     * If the command is unique, return the command if it's name matches the command name and it's type
     * is message. If the command is not unique, return the command if it's name matches the command name
     * and it's type is message. If the command is not unique, return the command if it's name matches
     * the subcommand name and it's type is message.
     * @param {string} commandName - The name of the command you want to get.
     * @param {string} [subCommandName] - The name of the subcommand.
     * @returns The command that is being returned is the command that is being called.
     */
    getCommand(commandName: string, subCommandName?: string): {
        command?: CommandClass;
        usedSubCommand: boolean;
    };
    /**
     * If the command name is the same as the command name passed in, then check if the subcommand name
     * is the same as the subcommand name passed in, if it is, return the command, if it isn't, check if
     * the command name is the same as the subcommand name passed in, if it is, return the command, if it
     * isn't, return undefined.
     * @param {string} commandName - The name of the command you want to get.
     * @param {string} [subCommandName] - The name of the subcommand.
     * @returns a Command or undefined.
     */
    getCommandFromInteraction(commandName: string, subCommandName?: string): CommandClass | undefined;
}
