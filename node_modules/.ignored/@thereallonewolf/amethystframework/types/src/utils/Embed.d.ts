/// <reference types="node" />
import { DiscordEmbedField } from "../../deps.js";
/**
 * A class to create embed easily
 * */
export declare class AmethystEmbed {
    /** The amount of characters in the embed. */
    currentTotal: number;
    /** Whether the limits should be enforced or not. */
    enforceLimits: boolean;
    /** If a file is attached to the message it will be added here. */
    file?: EmbedFile;
    color: number;
    fields: DiscordEmbedField[];
    author?: {
        name: string;
        iconUrl?: string;
        url?: string;
    };
    description?: string;
    footer?: {
        text: string;
        iconUrl?: string;
    };
    image?: {
        url: string;
    };
    timestamp?: number;
    title?: string;
    thumbnail?: {
        url: string;
    };
    url?: string;
    /**
     * By default we will always want to enforce discord limits but this option allows us to bypass for
     * whatever reason.
     * @param [enforceLimits=true] - This is a boolean value that determines whether or not the library
     * will enforce the Discord limits.
     * @returns The class itself.
     */
    constructor(enforceLimits?: boolean);
    /**
     * If the string is bigger then the allowed max shorten it. If it is maxed out already return empty
     * string as nothing can be added anymore. If the string breaks the maximum embed limit then shorten
     * it. Return the data as is with no changes
     * @param {string} data - The string to be checked.
     * @param {number} max - number - The maximum amount of characters allowed for this field.
     * @returns The data that is being returned is the data that is being passed in.
     */
    fitData(data: string, max: number): string;
    /**
     * This function sets the author of the embed, and returns the embed object.
     * @param {string} name - string - The name of the author.
     * @param {string} [icon] - The icon of the author.
     * @param {string} [url] - string
     * @returns The object itself.
     */
    setAuthor(name: string, icon?: string, url?: string): this;
    /**
     * It sets the color of the embed to a random color or a color that the user has specified.
     * @param {string} color - The color of the embed.
     * @returns The class itself.
     */
    setColor(color: string): this;
    /**
     * It takes a string or an array of strings and sets the description of the embed to the string or
     * the array of strings joined by a newline
     * @param {string | string[]} description - The description of the embed.
     * @returns The embed object itself.
     */
    setDescription(description: string | string[]): this;
    /**
     * It adds a field to the embed.
     * @param {string} name - string - The name of the field.
     * @param {string} value - The value of the field. This can be a string, or an array of strings. If
     * you want to use an array, you have to set the inline field option to true, otherwise it will be
     * ignored.
     * @param [inline=false] - boolean
     * @returns The object itself.
     */
    addField(name: string, value: string, inline?: boolean): this;
    /**
     * It adds a blank field to the embed
     * @param [inline=false] - Boolean - Whether or not this field should display inline
     * @returns The return value of the addField method.
     */
    addBlankField(inline?: boolean): this;
    /**
     * It takes a file and a name, and sets the file to the blob and name, and then sets the image to the
     * name.
     * @param {Blob} file - Blob - The file to attach.
     * @param {string} name - The name of the file.
     * @returns The object itself.
     */
    attachFile(file: Blob, name: string): this;
    /**
     * This function sets the footer of the embed.
     * @param {string} text - The text of the footer.
     * @param {string} [icon] - The icon of the embed, displayed at the top-right corner.
     * @returns The object itself.
     */
    setFooter(text: string, icon?: string): this;
    /**
     * This function takes a string as an argument and sets the image property of the object to the value
     * of the argument.
     * @param {string} url - The URL of the image to display.
     * @returns The object itself.
     */
    setImage(url: string): this;
    /**
     * If the user doesn't pass in a value for the time parameter, then the function will use the current
     * time as the default value.
     * @param time - The timestamp to set the date to.
     * @returns The object itself.
     */
    setTimestamp(time?: number): this;
    /**
     * The function takes a string and an optional string as arguments and returns the object it was
     * called on
     * @param {string} title - The title of the embed.
     * @param {string} [url] - The URL of the embed.
     * @returns The object itself.
     */
    setTitle(title: string, url?: string): this;
    /**
     * This function takes a string as an argument and sets the thumbnail property of the object to the
     * value of the argument.
     * @param {string} url - The URL of the thumbnail.
     * @returns The object itself.
     */
    setThumbnail(url: string): this;
}
export interface EmbedFile {
    blob: Blob;
    name: string;
}
