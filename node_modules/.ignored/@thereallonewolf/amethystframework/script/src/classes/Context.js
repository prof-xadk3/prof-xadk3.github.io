"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContext = exports.Context = void 0;
/* It's a class that represents a context of a message or interaction */
class Context {
    constructor(options, client) {
        Object.defineProperty(this, "deffered", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "replied", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "sentMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "interaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "interactionContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "guildId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "guild", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "member", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "user", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "command", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.interaction = options.interaction;
        this.message = options.message;
        this.interactionContext = options.interactionContext;
        this.guildId = options.guildId;
        this.guild = options.guild;
        this.member = options.member;
        this.user = options.user;
        this.author = options.user;
        this.client = client;
        this.channel = options.channel;
        this.options = options.options;
        this.id = options.id;
        this.command = options.command;
        if (this.interaction) {
            this.replied = true;
        }
        this.options.context = this;
    }
    /**
     * It's a constructor for the Context class
     * @param {ContextOptions} options - ContextOptions
     * @param {AmethystBot} client - The client instance
     */
    async followUp(content) {
        return await this.reply(content);
    }
    /**
     * The followUp function is a wrapper for the reply function
     * @param {any} content - any - The content to send to the user. This can be a string, an object, or
     * a function that returns a string or object.
     * @returns The context object is being returned.
     */
    async reply(content) {
        if (this.interactionContext && this.interaction) {
            if (this.replied) {
                const msg = await this.client.helpers.sendFollowupMessage(this.interaction.token, {
                    type: 4,
                    data: { ...content, flags: content.private ? 1 << 6 : undefined },
                });
                this.sentMessage = msg;
                return await createContext({ message: this.sentMessage }, this.options, this.command, this.client);
            }
            else {
                const msg = await this.client.helpers.sendInteractionResponse(this.interaction.id, this.interaction.token, {
                    type: 4,
                    data: { ...content, flags: content.empheral ? 1 << 6 : undefined },
                });
                this.sentMessage = msg;
                this.replied = true;
                return await createContext({ message: this.sentMessage }, this.options, this.command, this.client);
            }
        }
        else if (this.message) {
            const msg = await this.client.helpers.sendMessage(this.message.channelId, {
                ...content,
                messageReference: {
                    messageId: this.message.id,
                    channelId: this.message.channelId,
                    guildId: this.message.guildId,
                    failIfNotExists: false,
                },
            });
            this.sentMessage = msg;
            this.replied = true;
            if (content.private)
                this.client.helpers.deleteMessage(msg.channelId, msg.id, undefined, 5000);
            return await createContext({ message: this.sentMessage }, this.options, this.command, this.client);
        }
        else {
            return this;
        }
    }
    /**
     * If the message is an interaction, edit the original message, otherwise edit the message that was
     * sent.
     * @param {any} content - any - The content to send.
     * @returns The context object.
     */
    async editReply(content) {
        if (this.interactionContext && this.interaction) {
            const msg = await this.client.helpers.editOriginalInteractionResponse(this.interaction.token, content);
            this.sentMessage = msg;
            this.replied = true;
            if (msg)
                return await createContext({ message: this.sentMessage }, this.options, this.command, this.client);
            else
                return this;
        }
        else if (this.message) {
            if (this.sentMessage) {
                const msg = await this.client.helpers.editMessage(this.sentMessage.channelId, this.sentMessage.id, content);
                this.sentMessage = msg;
                this.replied = true;
                if (content.private)
                    this.client.helpers.deleteMessage(msg.channelId, msg.id, undefined, 5000);
                return await createContext({ message: this.sentMessage }, this.options, this.command, this.client);
            }
            else {
                const msg = await this.client.helpers.editMessage(this.message.channelId, this.message.id, content);
                this.sentMessage = msg;
                this.replied = true;
                if (content.private)
                    this.client.helpers.deleteMessage(msg.channelId, msg.id, undefined, 5000);
                return await createContext({ message: this.sentMessage }, this.options, this.command, this.client);
            }
        }
        else {
            return this;
        }
    }
}
exports.Context = Context;
/**
 * It creates a context object for a command
 * @param data - { interaction?: Interaction; message?: Message }
 * @param {optionResults} option - optionResults
 * @param {AmethystBot} bot - AmethystBot - The bot instance.
 * @returns A Context object.
 */
async function createContext(data, option, command, bot) {
    const options = {
        options: option,
        interaction: data.interaction,
        message: data.message,
        interactionContext: data.message ? false : true,
        guildId: data.message ? data.message.guildId : data.interaction?.guildId,
        user: data.message
            ? await bot.cache.users.get(data.message.authorId)
            : data.interaction?.user,
        channel: data.message
            ? await bot.cache.channels.get(data.message.channelId)
            : //@ts-ignore this should fix types
                await bot.cache.channels.get(data.interaction.channelId),
        id: data.message ? data.message.id : data.interaction?.message?.id ?? 0n,
        command: command,
    };
    //Assign guild.
    if (data.message && data.message.guildId)
        options.guild = await bot.cache.guilds.get(data.message.guildId);
    else if (data.interaction && data.interaction.guildId)
        options.guild = await bot.cache.guilds.get(data.interaction.guildId);
    // Assign message if context is for a Interaction.
    if (data.interaction && data.interaction.message)
        options.message = data.interaction.message;
    if (data.message && data.message.member)
        options.member = data.message.member;
    if (data.interaction && data.interaction.member)
        options.member = data.interaction.member;
    return new Context(options, bot);
}
exports.createContext = createContext;
