"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadInhibitors = exports.loadCommands = exports.loadEvents = exports.load = void 0;
const dntShim = __importStar(require("../../_dnt.shims.js"));
async function* load(dir) {
    for await (const file of dntShim.Deno.readDir(dir)) {
        if (file.isDirectory) {
            yield* load(`./${dir}/${file.name}`);
            continue;
        }
        const module = await (_a = `file://${dntShim.Deno.realPathSync(`${dir}/${file.name}`)}`, Promise.resolve().then(() => __importStar(require(_a))));
        yield module;
    }
}
exports.load = load;
async function loadEvents(bot, dir) {
    const eventFiles = load(dir);
    for await (const eventFile of eventFiles) {
        if (eventFile.default) {
            bot.on(eventFile.default.name, eventFile.default.execute);
        }
    }
}
exports.loadEvents = loadEvents;
// Just for test
// Soon enough there will be just 1 command type that has support for both slash and message command
async function loadCommands(bot, dir) {
    const commandFiles = load(dir);
    for await (const commandFile of commandFiles) {
        if (commandFile.default) {
            bot.amethystUtils.createCommand(commandFile.default);
        }
    }
}
exports.loadCommands = loadCommands;
async function loadInhibitors(bot, dir) {
    const inhibitorFiles = load(dir);
    for await (const inhibitorFile of inhibitorFiles) {
        if (inhibitorFile.default) {
            bot.inhibitors.set(inhibitorFile.default.name, inhibitorFile.default.execute);
        }
    }
}
exports.loadInhibitors = loadInhibitors;
