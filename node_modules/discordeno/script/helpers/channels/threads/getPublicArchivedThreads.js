"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublicArchivedThreads = void 0;
const collection_js_1 = require("../../../util/collection.js");
/**
 * Gets the list of public archived threads for a channel.
 *
 * @param bot - The bot instance to use to make the request.
 * @param channelId - The ID of the channel to get the archived threads for.
 * @param options - The parameters for the fetching of threads.
 * @returns An instance of {@link ArchivedThreads}.
 *
 * @remarks
 * Requires the `READ_MESSAGE_HISTORY` permission.
 *
 * If called on a channel of type {@link ChannelTypes.GuildText}, returns threads of type {@link ChannelTypes.GuildPublicThread}.
 * If called on a channel of type {@link ChannelTypes.GuildNews}, returns threads of type {@link ChannelTypes.GuildNewsThread}.
 *
 * Threads are ordered by the `archive_timestamp` property included in the metadata of the object in descending order.
 *
 * @see {@link https://discord.com/developers/docs/resources/channel#list-public-archived-threads}
 */
async function getPublicArchivedThreads(bot, channelId, options) {
    const results = await bot.rest.runMethod(bot.rest, "GET", bot.constants.routes.THREAD_ARCHIVED_PUBLIC(channelId, options));
    return {
        threads: new collection_js_1.Collection(results.threads.map((result) => {
            const thread = bot.transformers.channel(bot, { channel: result });
            return [thread.id, thread];
        })),
        members: new collection_js_1.Collection(results.members.map((result) => {
            const member = bot.transformers.threadMember(bot, result);
            return [member.id, member];
        })),
        hasMore: results.has_more,
    };
}
exports.getPublicArchivedThreads = getPublicArchivedThreads;
