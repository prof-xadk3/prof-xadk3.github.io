"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.editAutomodRule = void 0;
/**
 * Edits an automod rule.
 *
 * @param bot - The bot instance to use to make the request.
 * @param guildId - The ID of the guild to edit the rule in.
 * @param ruleId - The ID of the rule to edit.
 * @param options - The parameters for the edit of the rule.
 * @returns An instance of the edited {@link AutoModerationRule}.
 *
 * @remarks
 * Requires the `MANAGE_GUILD` permission.
 *
 * Fires an _Auto Moderation Rule Update_ gateway event.
 *
 * @see {@link https://discord.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule}
 */
async function editAutomodRule(bot, guildId, ruleId, options) {
    const result = await bot.rest.runMethod(bot.rest, "PATCH", bot.constants.routes.AUTOMOD_RULE(guildId, ruleId), {
        name: options.name,
        event_type: options.eventType,
        trigger_metadata: options.triggerMetadata
            ? {
                keyword_filter: options.triggerMetadata.keywordFilter,
                presets: options.triggerMetadata.presets,
                allow_list: options.triggerMetadata.allowList,
                mention_total_limit: options.triggerMetadata.mentionTotalLimit,
            }
            : undefined,
        actions: options.actions?.map((action) => ({
            type: action.type,
            metadata: {
                channel_id: action.metadata.channelId?.toString(),
                duration_seconds: action.metadata.durationSeconds,
            },
        })),
        enabled: options.enabled ?? true,
        exempt_roles: options.exemptRoles?.map((id) => id.toString()),
        exempt_channels: options.exemptChannels?.map((id) => id.toString()),
        reason: options.reason,
    });
    return bot.transformers.automodRule(bot, result);
}
exports.editAutomodRule = editAutomodRule;
