"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInvalidRequestBucket = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const mod_js_1 = require("../mod.js");
/**
 * A invalid request bucket is used in a similar manner as a leaky bucket but a invalid request bucket can be refilled as needed.
 * It's purpose is to make sure the bot does not hit the limit to getting a 1 hr ban.
 *
 * @param options The options used to configure this bucket.
 * @returns RefillingBucket
 */
function createInvalidRequestBucket(options) {
    const bucket = {
        current: options.current ?? 0,
        max: options.max ?? 10000,
        interval: options.interval ?? 600000,
        timeoutId: options.timeoutId ?? 0,
        safety: options.safety ?? 1,
        frozenAt: options.frozenAt ?? 0,
        errorStatuses: options.errorStatuses ?? [401, 403, 429],
        requested: options.requested ?? 0,
        processing: false,
        waiting: [],
        requestsAllowed: function () {
            return bucket.max - bucket.current - bucket.requested - bucket.safety;
        },
        isRequestAllowed: function () {
            return bucket.requestsAllowed() > 0;
        },
        waitUntilRequestAvailable: async function () {
            return new Promise(async (resolve) => {
                // If whatever amount of requests is left is more than the safety margin, allow the request
                if (bucket.isRequestAllowed()) {
                    bucket.requested++;
                    resolve();
                }
                else {
                    bucket.waiting.push(resolve);
                    await bucket.processWaiting();
                }
            });
        },
        processWaiting: async function () {
            // If already processing, that loop will handle all waiting requests.
            if (bucket.processing) {
                return;
            }
            // Mark as processing so other loops don't start
            bucket.processing = true;
            while (bucket.waiting.length) {
                if (bucket.isRequestAllowed()) {
                    bucket.requested++;
                    // Resolve the next item in the queue
                    bucket.waiting.shift()?.();
                }
                else {
                    await (0, mod_js_1.delay)(1000);
                }
            }
            // Mark as false so next pending request can be triggered by new loop.
            bucket.processing = false;
        },
        handleCompletedRequest: function (code, sharedScope) {
            // Since request is complete, we can remove one from requested.
            bucket.requested--;
            // Since it is as a valid request, we don't need to do anything
            if (!bucket.errorStatuses.includes(code))
                return;
            // Shared scope is not considered invalid
            if (code === 429 && sharedScope)
                return;
            // INVALID REQUEST WAS MADE
            // If it was not frozen before, mark it frozen
            if (!bucket.frozenAt)
                bucket.frozenAt = Date.now();
            // Mark a request has been invalid
            bucket.current++;
            // If a timeout was not started, start a timeout to reset this bucket
            if (!bucket.timeoutId) {
                bucket.timeoutId = dntShim.setTimeout(() => {
                    bucket.frozenAt = 0;
                    bucket.current = 0;
                    bucket.timeoutId = 0;
                }, bucket.frozenAt + bucket.interval);
            }
        },
    };
    return bucket;
}
exports.createInvalidRequestBucket = createInvalidRequestBucket;
