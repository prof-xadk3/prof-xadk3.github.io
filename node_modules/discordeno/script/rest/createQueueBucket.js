"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQueueBucket = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const utils_js_1 = require("../util/utils.js");
/**
 * A queue bucket is used in a similar manner as a leaky bucket.
 *
 * @param options The options used to configure this bucket.
 * @returns RefillingBucket
 */
function createQueueBucket(rest, options) {
    const bucket = {
        remaining: options.remaining ?? 1,
        max: options.max ?? 1,
        interval: options.interval ?? 0,
        timeoutId: options.timeoutId ?? 0,
        processing: false,
        processingPending: false,
        firstRequest: true,
        waiting: [],
        pending: [],
        isRequestAllowed: function () {
            return bucket.remaining > 0;
        },
        waitUntilRequestAvailable: async function () {
            return new Promise(async (resolve) => {
                // If whatever amount of requests is left is more than the safety margin, allow the request
                if (bucket.isRequestAllowed()) {
                    // bucket.remaining++;
                    resolve();
                }
                else {
                    bucket.waiting.push(resolve);
                    await bucket.processWaiting();
                }
            });
        },
        processWaiting: async function () {
            // If already processing, that loop will handle all waiting requests.
            if (bucket.processing) {
                return;
            }
            // Mark as processing so other loops don't start
            bucket.processing = true;
            while (bucket.waiting.length) {
                if (bucket.isRequestAllowed()) {
                    // Resolve the next item in the queue
                    bucket.waiting.shift()?.();
                }
                else {
                    await (0, utils_js_1.delay)(1000);
                }
            }
            // Mark as false so next pending request can be triggered by new loop.
            bucket.processing = false;
        },
        processPending: async function () {
            // If already processing, that loop will handle all pending requests.
            if (bucket.processingPending) {
                return;
            }
            // Mark as processing so other loops don't start
            bucket.processingPending = true;
            while (bucket.pending.length) {
                if (bucket.firstRequest || bucket.isRequestAllowed()) {
                    const [queuedRequest] = bucket.pending;
                    if (queuedRequest) {
                        const basicURL = rest.simplifyUrl(queuedRequest.request.url, queuedRequest.request.method);
                        // IF THIS URL IS STILL RATE LIMITED, TRY AGAIN
                        const urlResetIn = rest.checkRateLimits(rest, basicURL);
                        if (urlResetIn) {
                            dntShim.setTimeout(() => {
                                bucket.processPending();
                            }, urlResetIn);
                            break;
                        }
                        // IF A BUCKET EXISTS, CHECK THE BUCKET'S RATE LIMITS
                        const bucketResetIn = queuedRequest.payload.bucketId
                            ? rest.checkRateLimits(rest, queuedRequest.payload.bucketId)
                            : false;
                        if (bucketResetIn) {
                            dntShim.setTimeout(() => {
                                bucket.processPending();
                            }, bucketResetIn);
                            break;
                        }
                        bucket.firstRequest = false;
                        bucket.remaining--;
                        if (!bucket.timeoutId && !bucket.remaining && bucket.interval) {
                            bucket.timeoutId = dntShim.setTimeout(() => {
                                bucket.remaining = bucket.max;
                                bucket.timeoutId = 0;
                            }, bucket.interval);
                        }
                        // Remove from queue, we are executing it.
                        bucket.pending.shift();
                        rest.processGlobalQueue(rest, {
                            ...queuedRequest,
                            urlToUse: queuedRequest.request.url,
                            basicURL,
                        });
                    }
                }
                else {
                    await (0, utils_js_1.delay)(1000);
                }
            }
            // Mark as false so next pending request can be triggered by new loop.
            bucket.processingPending = false;
            rest.cleanupQueues(rest);
        },
        handleCompletedRequest: function (headers) {
            bucket.max = headers.max;
            bucket.interval = headers.interval;
            bucket.remaining = headers.remaining;
            if (bucket.remaining <= 1) {
                bucket.timeoutId = dntShim.setTimeout(() => {
                    bucket.remaining = bucket.max;
                    bucket.timeoutId = 0;
                }, headers.interval);
            }
        },
        makeRequest: async function (options) {
            await bucket.waitUntilRequestAvailable();
            bucket.pending.push(options);
            bucket.processPending();
        },
    };
    return bucket;
}
exports.createQueueBucket = createQueueBucket;
