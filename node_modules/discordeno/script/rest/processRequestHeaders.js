"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processRequestHeaders = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
/** Processes the rate limit headers and determines if it needs to be rate limited and returns the bucket id if available */
function processRequestHeaders(rest, url, headers) {
    let rateLimited = false;
    // GET ALL NECESSARY HEADERS
    const remaining = headers.get("x-ratelimit-remaining");
    const retryAfter = headers.get("x-ratelimit-reset-after");
    const reset = Date.now() + Number(retryAfter) * 1000;
    const global = headers.get("x-ratelimit-global");
    // undefined override null needed for typings
    const bucketId = headers.get("x-ratelimit-bucket") || undefined;
    rest.pathQueues.get(url)?.handleCompletedRequest({
        remaining: Number(remaining),
        interval: Number(retryAfter) * 1000,
        max: Number(headers.get("x-ratelimit-limit")),
    });
    // IF THERE IS NO REMAINING RATE LIMIT, MARK IT AS RATE LIMITED
    if (remaining === "0") {
        rateLimited = true;
        // SAVE THE URL AS LIMITED, IMPORTANT FOR NEW REQUESTS BY USER WITHOUT BUCKET
        rest.rateLimitedPaths.set(url, {
            url,
            resetTimestamp: reset,
            bucketId,
        });
        // SAVE THE BUCKET AS LIMITED SINCE DIFFERENT URLS MAY SHARE A BUCKET
        if (bucketId) {
            rest.rateLimitedPaths.set(bucketId, {
                url,
                resetTimestamp: reset,
                bucketId,
            });
        }
    }
    // IF THERE IS NO REMAINING GLOBAL LIMIT, MARK IT RATE LIMITED GLOBALLY
    if (global) {
        const retryAfter = headers.get("retry-after");
        const globalReset = Date.now() + Number(retryAfter) * 1000;
        rest.debug(`[REST = Globally Rate Limited] URL: ${url} | Global Rest: ${globalReset}`);
        rest.globallyRateLimited = true;
        rateLimited = true;
        dntShim.setTimeout(() => {
            rest.globallyRateLimited = false;
        }, globalReset);
        rest.rateLimitedPaths.set("global", {
            url: "global",
            resetTimestamp: globalReset,
            bucketId,
        });
        if (bucketId) {
            rest.rateLimitedPaths.set(bucketId, {
                url: "global",
                resetTimestamp: globalReset,
                bucketId,
            });
        }
    }
    if (rateLimited && !rest.processingRateLimitedPaths) {
        rest.processRateLimitedPaths(rest);
    }
    return rateLimited ? bucketId : undefined;
}
exports.processRequestHeaders = processRequestHeaders;
