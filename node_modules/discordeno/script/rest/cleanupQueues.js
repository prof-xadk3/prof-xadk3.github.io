"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isQueueClearable = exports.clearQueue = exports.cleanupQueues = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
/** Cleans up the queues by checking if there is nothing left and removing it. */
function cleanupQueues(rest) {
    for (const [key, queue] of rest.pathQueues) {
        // rest.debug(`[REST - cleanupQueues] Running for of loop. ${key}`);
        if (!isQueueClearable(queue))
            continue;
        // REMOVE IT FROM CACHE
        dntShim.setTimeout(() => {
            clearQueue(rest, key, queue);
        }, 5000);
    }
    // NO QUEUE LEFT, DISABLE THE QUEUE
    if (!rest.pathQueues.size)
        rest.processingQueue = false;
}
exports.cleanupQueues = cleanupQueues;
function clearQueue(rest, key, queue) {
    if (!isQueueClearable(queue))
        return;
    rest.pathQueues.delete(key);
}
exports.clearQueue = clearQueue;
function isQueueClearable(queue) {
    if (queue.firstRequest)
        return false;
    if (queue.waiting.length)
        return false;
    if (queue.pending.length)
        return false;
    if (!queue.interval)
        return false;
    if (queue.processing)
        return false;
    if (queue.processingPending)
        return false;
    return true;
}
exports.isQueueClearable = isQueueClearable;
