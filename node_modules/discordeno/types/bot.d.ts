import { createGatewayManager } from "./gateway/manager/gatewayManager.js";
import * as handlers from "./handlers/mod.js";
import * as helpers from "./helpers/mod.js";
import { createRestManager, CreateRestManagerOptions } from "./rest/mod.js";
import { transformApplication } from "./transformers/application.js";
import { transformApplicationCommand } from "./transformers/applicationCommand.js";
import { transformApplicationCommandPermission } from "./transformers/applicationCommandPermission.js";
import { transformEmbed } from "./transformers/embed.js";
import { Emoji, transformEmoji } from "./transformers/emoji.js";
import { GetGatewayBot, transformGatewayBot } from "./transformers/gatewayBot.js";
import { Integration } from "./transformers/integration.js";
import { Interaction, InteractionDataOption } from "./transformers/interaction.js";
import { Invite } from "./transformers/invite.js";
import { Channel, Guild, Member, Message, Role, ScheduledEvent, Template, transformGuild, transformTemplate, User, VoiceState } from "./transformers/mod.js";
import { PresenceUpdate } from "./transformers/presence.js";
import { transformStageInstance } from "./transformers/stageInstance.js";
import { StickerPack, transformStickerPack } from "./transformers/sticker.js";
import { ThreadMember, transformThreadMember } from "./transformers/threadMember.js";
import { transformVoiceRegion } from "./transformers/voiceRegion.js";
import { transformWebhook } from "./transformers/webhook.js";
import { transformWelcomeScreen } from "./transformers/welcomeScreen.js";
import { transformWidget } from "./transformers/widget.js";
import { transformWidgetSettings } from "./transformers/widgetSettings.js";
import { DiscordAllowedMentions, DiscordApplicationCommandOptionChoice, DiscordAutoModerationActionExecution, DiscordAutoModerationRule, DiscordCreateApplicationCommand, DiscordEmoji, DiscordGatewayPayload, DiscordInteractionDataOption, DiscordInteractionResponse, DiscordReady, DiscordStickerPack, DiscordTemplate } from "./types/discord.js";
import { BigString, Errors, GatewayDispatchEventNames, GatewayIntents } from "./types/shared.js";
import { bigintToSnowflake, snowflakeToBigint } from "./util/bigint.js";
import { calculateShardId } from "./util/calculateShardId.js";
import { Collection } from "./util/collection.js";
import { iconBigintToHash, iconHashToBigInt } from "./util/hash.js";
import { calculateBits, calculatePermissions } from "./util/permissions.js";
import { urlToBase64 } from "./util/urlToBase64.js";
import { delay, formatImageURL } from "./util/utils.js";
import { validateLength } from "./util/validateLength.js";
import { DiscordActivity, DiscordApplication, DiscordApplicationCommand, DiscordApplicationCommandOption, DiscordAttachment, DiscordAuditLogEntry, DiscordChannel, DiscordComponent, DiscordEmbed, DiscordGetGatewayBot, DiscordGuild, DiscordGuildApplicationCommandPermissions, DiscordGuildWidget, DiscordGuildWidgetSettings, DiscordIntegrationCreateUpdate, DiscordInteraction, DiscordInviteCreate, DiscordMember, DiscordMessage, DiscordPresenceUpdate, DiscordRole, DiscordScheduledEvent, DiscordStageInstance, DiscordSticker, DiscordTeam, DiscordThreadMember, DiscordUser, DiscordVoiceRegion, DiscordVoiceState, DiscordWebhook, DiscordWelcomeScreen } from "./types/discord.js";
import { CreateShardManager } from "./gateway/manager/shardManager.js";
import { AllowedMentions, CreateApplicationCommand, InteractionResponse } from "./mod.js";
import { Activity } from "./transformers/activity.js";
import { Application } from "./transformers/application.js";
import { ApplicationCommand } from "./transformers/applicationCommand.js";
import { ApplicationCommandOption } from "./transformers/applicationCommandOption.js";
import { ApplicationCommandOptionChoice, transformApplicationCommandOptionChoice } from "./transformers/applicationCommandOptionChoice.js";
import { ApplicationCommandPermission } from "./transformers/applicationCommandPermission.js";
import { Attachment } from "./transformers/attachment.js";
import { AuditLogEntry } from "./transformers/auditLogEntry.js";
import { AutoModerationActionExecution, transformAutoModerationActionExecution } from "./transformers/automodActionExecution.js";
import { AutoModerationRule, transformAutoModerationRule } from "./transformers/automodRule.js";
import { Component } from "./transformers/component.js";
import { Embed } from "./transformers/embed.js";
import { StageInstance } from "./transformers/stageInstance.js";
import { Sticker } from "./transformers/sticker.js";
import { Team } from "./transformers/team.js";
import { VoiceRegions } from "./transformers/voiceRegion.js";
import { Webhook } from "./transformers/webhook.js";
import { WelcomeScreen } from "./transformers/welcomeScreen.js";
import { GuildWidget } from "./transformers/widget.js";
import { GuildWidgetSettings } from "./transformers/widgetSettings.js";
export declare function createBot(options: CreateBotOptions): Bot;
export declare function createEventHandlers(events: Partial<EventHandlers>): EventHandlers;
export declare function startBot(bot: Bot): Promise<void>;
export declare function createUtils(options: Partial<HelperUtils>): {
    snowflakeToBigint: typeof snowflakeToBigint;
    bigintToSnowflake: typeof bigintToSnowflake;
    calculateShardId: typeof calculateShardId;
    delay: typeof delay;
    iconHashToBigInt: typeof iconHashToBigInt;
    iconBigintToHash: typeof iconBigintToHash;
    validateLength: typeof validateLength;
    urlToBase64: typeof urlToBase64;
    formatImageURL: typeof formatImageURL;
    calculateBits: typeof calculateBits;
    calculatePermissions: typeof calculatePermissions;
};
export interface HelperUtils {
    snowflakeToBigint: typeof snowflakeToBigint;
    bigintToSnowflake: typeof bigintToSnowflake;
    calculateShardId: typeof calculateShardId;
    delay: typeof delay;
    iconHashToBigInt: typeof iconHashToBigInt;
    iconBigintToHash: typeof iconBigintToHash;
    validateLength: typeof validateLength;
    urlToBase64: typeof urlToBase64;
    formatImageURL: typeof formatImageURL;
    calculateBits: typeof calculateBits;
    calculatePermissions: typeof calculatePermissions;
}
export declare function stopBot(bot: Bot): Promise<Bot>;
export interface CreateBotOptions {
    token: string;
    botId?: bigint;
    applicationId?: bigint;
    secretKey?: string;
    events?: Partial<EventHandlers>;
    intents?: GatewayIntents;
    botGatewayData?: GetGatewayBot;
    rest?: Omit<CreateRestManagerOptions, "token">;
    handleDiscordPayload?: CreateShardManager["handleMessage"];
    utils?: Partial<ReturnType<typeof createUtils>>;
    transformers?: Partial<ReturnType<typeof createTransformers>>;
    helpers?: Partial<Helpers>;
}
export declare type UnPromise<T extends Promise<unknown>> = T extends Promise<infer K> ? K : never;
export interface Bot {
    id: bigint;
    applicationId: bigint;
    token: string;
    intents: GatewayIntents;
    urlWSS: string;
    botGatewayData?: GetGatewayBot;
    utils: ReturnType<typeof createUtils>;
    transformers: Transformers;
    helpers: ReturnType<typeof createHelpers>;
    rest: ReturnType<typeof createRestManager>;
    gateway: ReturnType<typeof createGatewayManager>;
    events: EventHandlers;
    handlers: ReturnType<typeof createBotGatewayHandlers>;
    activeGuildIds: Set<bigint>;
    constants: ReturnType<typeof createBotConstants>;
    cache: {
        unrepliedInteractions: Set<bigint>;
        fetchAllMembersProcessingRequests: Map<string, Function>;
    };
    enabledPlugins: Set<string>;
    handleDiscordPayload?: CreateShardManager["handleMessage"];
}
export declare const defaultHelpers: {
    followAnnouncementChannel(bot: Bot, sourceChannelId: BigString, targetChannelId: BigString): Promise<bigint>;
    createForumThread(bot: Bot, channelId: BigString, options: helpers.CreateForumPostWithMessage): Promise<Channel>;
    createStageInstance(bot: Bot, options: helpers.CreateStageInstance): Promise<StageInstance>;
    deleteStageInstance(bot: Bot, channelId: BigString, reason?: string | undefined): Promise<void>;
    editStageInstance(bot: Bot, channelId: BigString, data: helpers.EditStageInstanceOptions): Promise<StageInstance>;
    getStageInstance(bot: Bot, channelId: BigString): Promise<StageInstance>;
    addThreadMember(bot: Bot, channelId: BigString, userId: BigString): Promise<void>;
    getActiveThreads(bot: Bot, guildId: BigString): Promise<helpers.ActiveThreads>;
    getPrivateArchivedThreads(bot: Bot, channelId: BigString, options?: helpers.ListArchivedThreads | undefined): Promise<helpers.ArchivedThreads>;
    getPrivateJoinedArchivedThreads(bot: Bot, channelId: BigString, options?: helpers.ListArchivedThreads | undefined): Promise<helpers.ArchivedThreads>;
    getPublicArchivedThreads(bot: Bot, channelId: BigString, options?: helpers.ListArchivedThreads | undefined): Promise<helpers.ArchivedThreads>;
    getThreadMember(bot: Bot, channelId: BigString, userId: BigString): Promise<ThreadMember>;
    getThreadMembers(bot: Bot, channelId: BigString): Promise<Collection<bigint, ThreadMember>>;
    joinThread(bot: Bot, channelId: BigString): Promise<void>;
    leaveThread(bot: Bot, channelId: BigString): Promise<void>;
    removeThreadMember(bot: Bot, channelId: BigString, userId: BigString): Promise<void>;
    startThreadWithMessage(bot: Bot, channelId: BigString, messageId: BigString, options: helpers.StartThreadWithMessage): Promise<Channel>;
    startThreadWithoutMessage(bot: Bot, channelId: BigString, options: helpers.StartThreadWithoutMessage): Promise<Channel>;
    createChannel(bot: Bot, guildId: BigString, options: helpers.CreateGuildChannel): Promise<Channel>;
    deleteChannel(bot: Bot, channelId: BigString, reason?: string | undefined): Promise<void>;
    deleteChannelPermissionOverride(bot: Bot, channelId: BigString, overwriteId: BigString, reason?: string | undefined): Promise<void>;
    editChannel(bot: Bot, channelId: BigString, options: helpers.ModifyChannel): Promise<Channel>;
    editChannelPermissionOverrides(bot: Bot, channelId: BigString, options: helpers.EditChannelPermissionOverridesOptions): Promise<void>;
    getChannel(bot: Bot, channelId: BigString): Promise<Channel>;
    getChannelInvites(bot: Bot, channelId: BigString): Promise<Collection<string, helpers.InviteMetadata>>;
    getChannels(bot: Bot, guildId: BigString): Promise<Collection<bigint, Channel>>;
    triggerTypingIndicator(bot: Bot, channelId: BigString): Promise<void>;
    startTyping: typeof helpers.triggerTypingIndicator;
    editChannelPositions(bot: Bot, guildId: BigString, channelPositions: helpers.ModifyGuildChannelPositions[]): Promise<void>;
    swapChannels: typeof helpers.editChannelPositions;
    createEmoji(bot: Bot, guildId: BigString, options: helpers.CreateGuildEmoji): Promise<Emoji>;
    deleteEmoji(bot: Bot, guildId: BigString, id: BigString, reason?: string | undefined): Promise<void>;
    editEmoji(bot: Bot, guildId: BigString, id: BigString, options: helpers.ModifyGuildEmoji): Promise<Emoji>;
    getEmoji(bot: Bot, guildId: BigString, emojiId: BigString): Promise<Emoji>;
    getEmojis(bot: Bot, guildId: BigString): Promise<Collection<bigint, Emoji>>;
    getEmojiURL(_bot: Bot, emojiId: BigString, animated?: boolean): string;
    createAutomodRule(bot: Bot, guildId: BigString, options: helpers.CreateAutoModerationRuleOptions): Promise<AutoModerationRule>;
    deleteAutomodRule(bot: Bot, guildId: BigString, ruleId: BigString, reason?: string | undefined): Promise<void>;
    editAutomodRule(bot: Bot, guildId: BigString, ruleId: BigString, options: Partial<helpers.EditAutoModerationRuleOptions>): Promise<AutoModerationRule>;
    getAutomodRule(bot: Bot, guildId: BigString, ruleId: BigString): Promise<AutoModerationRule>;
    getAutomodRules(bot: Bot, guildId: BigString): Promise<Collection<bigint, AutoModerationRule>>;
    deleteIntegration(bot: Bot, guildId: BigString, integrationId: BigString): Promise<void>;
    getIntegrations(bot: Bot, guildId: BigString): Promise<Collection<bigint, Integration>>;
    createInvite(bot: Bot, channelId: BigString, options?: helpers.CreateChannelInvite): Promise<helpers.BaseInvite>;
    deleteInvite(bot: Bot, inviteCode: string, reason?: string | undefined): Promise<void>;
    getInvite(bot: Bot, inviteCode: string, options?: helpers.GetInvite | undefined): Promise<helpers.BaseInvite>;
    getInvites(bot: Bot, guildId: BigString): Promise<Collection<string, helpers.InviteMetadata>>;
    createScheduledEvent(bot: Bot, guildId: BigString, options: helpers.CreateScheduledEvent): Promise<ScheduledEvent>;
    deleteScheduledEvent(bot: Bot, guildId: BigString, eventId: BigString): Promise<void>;
    editScheduledEvent(bot: Bot, guildId: BigString, eventId: BigString, options: Partial<helpers.EditScheduledEvent>): Promise<ScheduledEvent>;
    getScheduledEvent(bot: Bot, guildId: BigString, eventId: BigString, options?: {
        withUserCount?: boolean | undefined;
    } | undefined): Promise<ScheduledEvent>;
    getScheduledEvents(bot: Bot, guildId: BigString, options?: helpers.GetScheduledEvents | undefined): Promise<Collection<bigint, ScheduledEvent>>;
    getScheduledEventUsers(bot: Bot, guildId: BigString, eventId: BigString, options?: (helpers.GetScheduledEventUsers & {
        withMember?: false | undefined;
    }) | undefined): Promise<Collection<bigint, User>>;
    getScheduledEventUsers(bot: Bot, guildId: BigString, eventId: BigString, options?: (helpers.GetScheduledEventUsers & {
        withMember: true;
    }) | undefined): Promise<Collection<bigint, {
        user: User;
        member: Member;
    }>>;
    connectToVoiceChannel(bot: Bot, guildId: BigString, channelId: BigString, options?: import("./mod.js").AtLeastOne<Omit<helpers.UpdateVoiceState, "guildId" | "channelId">, {
        selfMute: Pick<Omit<helpers.UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
        selfDeaf: Pick<Omit<helpers.UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
    }> | undefined): Promise<void>;
    editOwnVoiceState(bot: Bot, guildId: BigString, options: helpers.EditOwnVoiceState): Promise<void>;
    editUserVoiceState(bot: Bot, guildId: BigString, options: helpers.EditUserVoiceState): Promise<void>;
    updateBotVoiceState: typeof helpers.editOwnVoiceState;
    getAvailableVoiceRegions(bot: Bot): Promise<Collection<string, VoiceRegions>>;
    getVoiceRegions(bot: Bot, guildId: BigString): Promise<Collection<string, VoiceRegions>>;
    leaveVoiceChannel(bot: Bot, guildId: BigString): Promise<void>;
    editWidgetSettings(bot: Bot, guildId: BigString, enabled: boolean, channelId?: string | null | undefined): Promise<GuildWidgetSettings>;
    getWidget(bot: Bot, guildId: BigString): Promise<GuildWidget>;
    getWidgetImageURL(bot: Bot, guildId: BigString, options?: helpers.GetGuildWidgetImageQuery | undefined): string;
    getWidgetSettings(bot: Bot, guildId: BigString): Promise<GuildWidgetSettings>;
    createGuild(bot: Bot, options: helpers.CreateGuild): Promise<Guild>;
    deleteGuild(bot: Bot, guildId: BigString): Promise<void>;
    editGuild(bot: Bot, guildId: BigString, options: helpers.ModifyGuild, shardId: number): Promise<Guild>;
    editGuildMfaLevel(bot: Bot, guildId: BigString, mfaLevel: import("./mod.js").MfaLevels, reason?: string | undefined): Promise<void>;
    editWelcomeScreen(bot: Bot, guildId: BigString, options: helpers.ModifyGuildWelcomeScreen): Promise<WelcomeScreen>;
    getAuditLog(bot: Bot, guildId: BigString, options?: helpers.GetGuildAuditLog | undefined): Promise<helpers.AuditLog>;
    getBan(bot: Bot, guildId: BigString, userId: BigString): Promise<helpers.Ban>;
    getBans(bot: Bot, guildId: BigString, options?: helpers.GetBans | undefined): Promise<Collection<bigint, helpers.Ban>>;
    getGuild(bot: Bot, guildId: BigString, options?: {
        counts?: boolean | undefined;
    }): Promise<Guild>;
    getGuildBannerURL(bot: Bot, guildId: BigString, options: {
        banner?: string | bigint | undefined;
        size?: helpers.ImageSize | undefined;
        format?: helpers.ImageFormat | undefined;
    }): string | undefined;
    getGuildIconURL(bot: Bot, guildId: BigString, imageHash: BigString | undefined, options?: {
        size?: helpers.ImageSize | undefined;
        format?: helpers.ImageFormat | undefined;
    } | undefined): string | undefined;
    getGuildPreview(bot: Bot, guildId: BigString): Promise<helpers.GuildPreview>;
    getGuildSplashURL(bot: Bot, guildId: BigString, imageHash: BigString | undefined, options?: {
        size?: helpers.ImageSize | undefined;
        format?: helpers.ImageFormat | undefined;
    } | undefined): string | undefined;
    getPruneCount(bot: Bot, guildId: BigString, options?: helpers.GetGuildPruneCountQuery | undefined): Promise<number>;
    getVanityUrl(bot: Bot, guildId: BigString): Promise<helpers.VanityUrl>;
    getWelcomeScreen(bot: Bot, guildId: BigString): Promise<WelcomeScreen>;
    leaveGuild(bot: Bot, guildId: BigString): Promise<void>;
    createGlobalApplicationCommand(bot: Bot, command: CreateApplicationCommand): Promise<ApplicationCommand>;
    createGuildApplicationCommand(bot: Bot, command: CreateApplicationCommand, guildId: BigString): Promise<ApplicationCommand>;
    deleteGlobalApplicationCommand(bot: Bot, commandId: BigString): Promise<void>;
    deleteGuildApplicationCommand(bot: Bot, commandId: BigString, guildId: BigString): Promise<void>;
    editApplicationCommandPermissions(bot: Bot, guildId: BigString, commandId: BigString, bearerToken: string, options: helpers.ApplicationCommandPermissions[]): Promise<ApplicationCommandPermission>;
    editGlobalApplicationCommand(bot: Bot, commandId: BigString, options: CreateApplicationCommand): Promise<ApplicationCommand>;
    editGuildApplicationCommand(bot: Bot, commandId: BigString, guildId: BigString, options: CreateApplicationCommand): Promise<ApplicationCommand>;
    getApplicationCommandPermission(bot: Bot, guildId: BigString, commandId: BigString): Promise<ApplicationCommandPermission>;
    getApplicationCommandPermissions(bot: Bot, guildId: BigString): Promise<Collection<bigint, ApplicationCommandPermission>>;
    getGlobalApplicationCommand(bot: Bot, commandId: BigString): Promise<ApplicationCommand>;
    getGlobalApplicationCommands(bot: Bot): Promise<Collection<bigint, ApplicationCommand>>;
    getGuildApplicationCommand(bot: Bot, commandId: BigString, guildId: BigString): Promise<ApplicationCommand>;
    getGuildApplicationCommands(bot: Bot, guildId: BigString): Promise<Collection<bigint, ApplicationCommand>>;
    upsertGlobalApplicationCommands(bot: Bot, commands: CreateApplicationCommand[]): Promise<Collection<bigint, ApplicationCommand>>;
    upsertGuildApplicationCommands(bot: Bot, guildId: BigString, commands: CreateApplicationCommand[]): Promise<Collection<bigint, ApplicationCommand>>;
    deleteFollowupMessage(bot: Bot, token: string, messageId: BigString): Promise<void>;
    deleteOriginalInteractionResponse(bot: Bot, token: string): Promise<void>;
    editFollowupMessage(bot: Bot, token: string, messageId: BigString, options: import("./mod.js").InteractionCallbackData): Promise<Message>;
    editOriginalInteractionResponse(bot: Bot, token: string, options: import("./mod.js").InteractionCallbackData): Promise<Message | undefined>;
    getFollowupMessage(bot: Bot, token: string, messageId: BigString): Promise<Message>;
    getOriginalInteractionResponse(bot: Bot, token: string): Promise<Message>;
    sendFollowupMessage(bot: Bot, token: string, options: InteractionResponse): Promise<Message>;
    sendInteractionResponse(bot: Bot, interactionId: BigString, token: string, options: InteractionResponse): Promise<void>;
    banMember(bot: Bot, guildId: BigString, userId: BigString, options?: helpers.CreateGuildBan | undefined): Promise<void>;
    editBotMember(bot: Bot, guildId: BigString, options: helpers.EditBotMemberOptions): Promise<Member>;
    editMember(bot: Bot, guildId: BigString, userId: BigString, options: helpers.ModifyGuildMember): Promise<Member>;
    fetchMembers(bot: Bot, guildId: BigString, options?: Omit<helpers.RequestGuildMembers, "guildId"> | undefined): Promise<void>;
    getAvatarURL(bot: Bot, userId: BigString, discriminator: string, options?: {
        avatar: BigString | undefined;
        size?: helpers.ImageSize | undefined;
        format?: helpers.ImageFormat | undefined;
    } | undefined): string;
    getDmChannel(bot: Bot, userId: BigString): Promise<Channel>;
    getMember(bot: Bot, guildId: BigString, userId: BigString): Promise<Member>;
    getMembers(bot: Bot, guildId: BigString, options: helpers.ListGuildMembers): Promise<Collection<bigint, Member>>;
    kickMember(bot: Bot, guildId: BigString, userId: BigString, reason?: string | undefined): Promise<void>;
    pruneMembers(bot: Bot, guildId: BigString, options: helpers.BeginGuildPrune): Promise<number | undefined>;
    searchMembers(bot: Bot, guildId: BigString, query: string, options?: Omit<import("./mod.js").SearchMembers, "query"> | undefined): Promise<Collection<bigint, Member>>;
    unbanMember(bot: Bot, guildId: BigString, userId: BigString): Promise<void>;
    addReaction(bot: Bot, channelId: BigString, messageId: BigString, reaction: string): Promise<void>;
    addReactions(bot: Bot, channelId: BigString, messageId: BigString, reactions: string[], ordered?: boolean): Promise<void>;
    deleteOwnReaction(bot: Bot, channelId: BigString, messageId: BigString, reaction: string): Promise<void>;
    deleteUserReaction(bot: Bot, channelId: BigString, messageId: BigString, userId: BigString, reaction: string): Promise<void>;
    deleteReactionsAll(bot: Bot, channelId: BigString, messageId: BigString): Promise<void>;
    deleteReactionsEmoji(bot: Bot, channelId: BigString, messageId: BigString, reaction: string): Promise<void>;
    getReactions(bot: Bot, channelId: BigString, messageId: BigString, reaction: string, options?: helpers.GetReactions | undefined): Promise<Collection<bigint, User>>;
    processReactionString(reaction: string): string;
    deleteMessage(bot: Bot, channelId: BigString, messageId: BigString, reason?: string | undefined, delayMilliseconds?: number): Promise<void>;
    deleteMessages(bot: Bot, channelId: BigString, messageIds: BigString[], reason?: string | undefined): Promise<void>;
    editMessage(bot: Bot, channelId: BigString, messageId: BigString, options: helpers.EditMessage): Promise<Message>;
    getMessage(bot: Bot, channelId: BigString, messageId: BigString): Promise<Message>;
    getMessages(bot: Bot, channelId: BigString, options?: helpers.GetMessagesOptions | undefined): Promise<Collection<bigint, Message>>;
    isGetMessagesAfter(options: helpers.GetMessagesOptions): options is helpers.GetMessagesAfter;
    isGetMessagesBefore(options: helpers.GetMessagesOptions): options is helpers.GetMessagesBefore;
    isGetMessagesAround(options: helpers.GetMessagesOptions): options is helpers.GetMessagesAround;
    isGetMessagesLimit(options: helpers.GetMessagesOptions): options is helpers.GetMessagesLimit;
    getPinnedMessages(bot: Bot, channelId: BigString): Promise<Collection<bigint, Message>>;
    pinMessage(bot: Bot, channelId: BigString, messageId: BigString, reason?: string | undefined): Promise<void>;
    crosspostMessage(bot: Bot, channelId: BigString, messageId: BigString): Promise<Message>;
    publishMessage: typeof helpers.crosspostMessage;
    sendMessage(bot: Bot, channelId: BigString, options: helpers.CreateMessage): Promise<Message>;
    unpinMessage(bot: Bot, channelId: BigString, messageId: BigString, reason?: string | undefined): Promise<void>;
    editBotProfile(bot: Bot, options: {
        username?: string | undefined;
        botAvatarURL?: string | null | undefined;
    }): Promise<User>;
    editBotStatus(bot: Bot, data: helpers.StatusUpdate): Promise<void>;
    editShardStatus(bot: Bot, shardId: number, data: helpers.StatusUpdate): Promise<void>;
    getApplicationInfo(bot: Bot): Promise<Application>;
    getGatewayBot(bot: Bot): Promise<GetGatewayBot>;
    getNitroStickerPacks(bot: Bot): Promise<Collection<bigint, StickerPack>>;
    getUser(bot: Bot, userId: BigString): Promise<User>;
    addRole(bot: Bot, guildId: BigString, userId: BigString, roleId: BigString, reason?: string | undefined): Promise<void>;
    createRole(bot: Bot, guildId: BigString, options: helpers.CreateGuildRole, reason?: string | undefined): Promise<Role>;
    deleteRole(bot: Bot, guildId: BigString, roleId: BigString): Promise<void>;
    editRole(bot: Bot, guildId: BigString, roleId: BigString, options: helpers.EditGuildRole): Promise<Role>;
    modifyRolePositions(bot: Bot, guildId: BigString, options: helpers.ModifyRolePositions[]): Promise<Collection<bigint, Role>>;
    getRoles(bot: Bot, guildId: BigString): Promise<Collection<bigint, Role>>;
    removeRole(bot: Bot, guildId: BigString, userId: BigString, roleId: BigString, reason?: string | undefined): Promise<void>;
    createGuildSticker(bot: Bot, guildId: bigint, options: helpers.CreateGuildStickerOptions): Promise<Sticker>;
    deleteGuildSticker(bot: Bot, guildId: bigint, stickerId: bigint, reason?: string | undefined): Promise<void>;
    editGuildSticker(bot: Bot, guildId: bigint, stickerId: bigint, options: import("./mod.js").AtLeastOne<helpers.EditGuildStickerOptions, {
        name?: Pick<helpers.EditGuildStickerOptions, "name"> | undefined;
        description?: Pick<helpers.EditGuildStickerOptions, "description"> | undefined;
        tags?: Pick<helpers.EditGuildStickerOptions, "tags"> | undefined;
        reason?: Pick<helpers.EditGuildStickerOptions, "reason"> | undefined;
    }>): Promise<Sticker>;
    getGuildSticker(bot: Bot, guildId: bigint, stickerId: bigint): Promise<Sticker>;
    getGuildStickers(bot: Bot, guildId: bigint): Promise<Collection<bigint, Sticker>>;
    getSticker(bot: Bot, stickerId: bigint): Promise<Sticker>;
    createGuildFromTemplate(bot: Bot, templateCode: string, options: helpers.CreateGuildFromTemplate): Promise<Guild>;
    createGuildTemplate(bot: Bot, guildId: BigString, options: helpers.CreateTemplate): Promise<Template>;
    deleteGuildTemplate(bot: Bot, guildId: BigString, templateCode: string): Promise<void>;
    editGuildTemplate(bot: Bot, guildId: BigString, templateCode: string, options: helpers.ModifyGuildTemplate): Promise<Template>;
    getGuildTemplate(bot: Bot, templateCode: string): Promise<Template>;
    getGuildTemplates(bot: Bot, guildId: BigString): Promise<Collection<string, Template>>;
    syncGuildTemplate(bot: Bot, guildId: BigString, templateCode: string): Promise<Template>;
    createWebhook(bot: Bot, channelId: BigString, options: helpers.CreateWebhook): Promise<Webhook>;
    deleteWebhook(bot: Bot, webhookId: BigString, reason?: string | undefined): Promise<void>;
    deleteWebhookMessage(bot: Bot, webhookId: BigString, token: string, messageId: BigString, options?: helpers.DeleteWebhookMessageOptions | undefined): Promise<void>;
    deleteWebhookWithToken(bot: Bot, webhookId: BigString, token: string): Promise<void>;
    editOriginalWebhookMessage(bot: Bot, webhookId: BigString, token: string, options: import("./mod.js").InteractionCallbackData & {
        threadId?: BigString | undefined;
    }): Promise<Message>;
    editWebhook(bot: Bot, webhookId: BigString, options: helpers.ModifyWebhook): Promise<Webhook>;
    editWebhookMessage(bot: Bot, webhookId: BigString, token: string, messageId: BigString, options: import("./mod.js").InteractionCallbackData & {
        threadId?: BigString | undefined;
    }): Promise<Message>;
    editWebhookWithToken(bot: Bot, webhookId: BigString, token: string, options: Omit<helpers.ModifyWebhook, "channelId">): Promise<Webhook>;
    executeWebhook(bot: Bot, webhookId: BigString, token: string, options: helpers.ExecuteWebhook): Promise<Message | undefined>;
    sendWebhookMessage: typeof helpers.executeWebhook;
    getChannelWebhooks(bot: Bot, channelId: BigString): Promise<Collection<bigint, Webhook>>;
    getGuildWebhooks(bot: Bot, guildId: BigString): Promise<Collection<bigint, Webhook>>;
    getWebhook(bot: Bot, webhookId: BigString): Promise<Webhook>;
    getWebhookMessage(bot: Bot, webhookId: BigString, token: string, messageId: BigString, options?: helpers.GetWebhookMessageOptions | undefined): Promise<Message>;
    getWebhookWithToken(bot: Bot, webhookId: BigString, token: string): Promise<Webhook>;
};
export declare type DefaultHelpers = typeof defaultHelpers;
export interface Helpers extends DefaultHelpers {
}
export declare function createHelpers(bot: Bot, customHelpers?: Partial<Helpers>): FinalHelpers;
export declare function createBaseHelpers(options: Partial<Helpers>): {
    followAnnouncementChannel: typeof helpers.followAnnouncementChannel;
    createForumThread: typeof helpers.createForumThread;
    createStageInstance: typeof helpers.createStageInstance;
    deleteStageInstance: typeof helpers.deleteStageInstance;
    editStageInstance: typeof helpers.editStageInstance;
    getStageInstance: typeof helpers.getStageInstance;
    addThreadMember: typeof helpers.addThreadMember;
    getActiveThreads: typeof helpers.getActiveThreads;
    getPrivateArchivedThreads: typeof helpers.getPrivateArchivedThreads;
    getPrivateJoinedArchivedThreads: typeof helpers.getPrivateJoinedArchivedThreads;
    getPublicArchivedThreads: typeof helpers.getPublicArchivedThreads;
    getThreadMember: typeof helpers.getThreadMember;
    getThreadMembers: typeof helpers.getThreadMembers;
    joinThread: typeof helpers.joinThread;
    leaveThread: typeof helpers.leaveThread;
    removeThreadMember: typeof helpers.removeThreadMember;
    startThreadWithMessage: typeof helpers.startThreadWithMessage;
    startThreadWithoutMessage: typeof helpers.startThreadWithoutMessage;
    createChannel: typeof helpers.createChannel;
    deleteChannel: typeof helpers.deleteChannel;
    deleteChannelPermissionOverride: typeof helpers.deleteChannelPermissionOverride;
    editChannel: typeof helpers.editChannel;
    editChannelPermissionOverrides: typeof helpers.editChannelPermissionOverrides;
    getChannel: typeof helpers.getChannel;
    getChannelInvites: typeof helpers.getChannelInvites;
    getChannels: typeof helpers.getChannels;
    triggerTypingIndicator: typeof helpers.triggerTypingIndicator;
    startTyping: typeof helpers.triggerTypingIndicator;
    editChannelPositions: typeof helpers.editChannelPositions;
    swapChannels: typeof helpers.editChannelPositions;
    createEmoji: typeof helpers.createEmoji;
    deleteEmoji: typeof helpers.deleteEmoji;
    editEmoji: typeof helpers.editEmoji;
    getEmoji: typeof helpers.getEmoji;
    getEmojis: typeof helpers.getEmojis;
    getEmojiURL: typeof helpers.getEmojiURL;
    createAutomodRule: typeof helpers.createAutomodRule;
    deleteAutomodRule: typeof helpers.deleteAutomodRule;
    editAutomodRule: typeof helpers.editAutomodRule;
    getAutomodRule: typeof helpers.getAutomodRule;
    getAutomodRules: typeof helpers.getAutomodRules;
    deleteIntegration: typeof helpers.deleteIntegration;
    getIntegrations: typeof helpers.getIntegrations;
    createInvite: typeof helpers.createInvite;
    deleteInvite: typeof helpers.deleteInvite;
    getInvite: typeof helpers.getInvite;
    getInvites: typeof helpers.getInvites;
    createScheduledEvent: typeof helpers.createScheduledEvent;
    deleteScheduledEvent: typeof helpers.deleteScheduledEvent;
    editScheduledEvent: typeof helpers.editScheduledEvent;
    getScheduledEvent: typeof helpers.getScheduledEvent;
    getScheduledEvents: typeof helpers.getScheduledEvents;
    getScheduledEventUsers: typeof helpers.getScheduledEventUsers;
    connectToVoiceChannel: typeof helpers.connectToVoiceChannel;
    editOwnVoiceState: typeof helpers.editOwnVoiceState;
    editUserVoiceState: typeof helpers.editUserVoiceState;
    updateBotVoiceState: typeof helpers.editOwnVoiceState;
    getAvailableVoiceRegions: typeof helpers.getAvailableVoiceRegions;
    getVoiceRegions: typeof helpers.getVoiceRegions;
    leaveVoiceChannel: typeof helpers.leaveVoiceChannel;
    editWidgetSettings: typeof helpers.editWidgetSettings;
    getWidget: typeof helpers.getWidget;
    getWidgetImageURL: typeof helpers.getWidgetImageURL;
    getWidgetSettings: typeof helpers.getWidgetSettings;
    createGuild: typeof helpers.createGuild;
    deleteGuild: typeof helpers.deleteGuild;
    editGuild: typeof helpers.editGuild;
    editGuildMfaLevel: typeof helpers.editGuildMfaLevel;
    editWelcomeScreen: typeof helpers.editWelcomeScreen;
    getAuditLog: typeof helpers.getAuditLog;
    getBan: typeof helpers.getBan;
    getBans: typeof helpers.getBans;
    getGuild: typeof helpers.getGuild;
    getGuildBannerURL: typeof helpers.getGuildBannerURL;
    getGuildIconURL: typeof helpers.getGuildIconURL;
    getGuildPreview: typeof helpers.getGuildPreview;
    getGuildSplashURL: typeof helpers.getGuildSplashURL;
    getPruneCount: typeof helpers.getPruneCount;
    getVanityUrl: typeof helpers.getVanityUrl;
    getWelcomeScreen: typeof helpers.getWelcomeScreen;
    leaveGuild: typeof helpers.leaveGuild;
    createGlobalApplicationCommand: typeof helpers.createGlobalApplicationCommand;
    createGuildApplicationCommand: typeof helpers.createGuildApplicationCommand;
    deleteGlobalApplicationCommand: typeof helpers.deleteGlobalApplicationCommand;
    deleteGuildApplicationCommand: typeof helpers.deleteGuildApplicationCommand;
    editApplicationCommandPermissions: typeof helpers.editApplicationCommandPermissions;
    editGlobalApplicationCommand: typeof helpers.editGlobalApplicationCommand;
    editGuildApplicationCommand: typeof helpers.editGuildApplicationCommand;
    getApplicationCommandPermission: typeof helpers.getApplicationCommandPermission;
    getApplicationCommandPermissions: typeof helpers.getApplicationCommandPermissions;
    getGlobalApplicationCommand: typeof helpers.getGlobalApplicationCommand;
    getGlobalApplicationCommands: typeof helpers.getGlobalApplicationCommands;
    getGuildApplicationCommand: typeof helpers.getGuildApplicationCommand;
    getGuildApplicationCommands: typeof helpers.getGuildApplicationCommands;
    upsertGlobalApplicationCommands: typeof helpers.upsertGlobalApplicationCommands;
    upsertGuildApplicationCommands: typeof helpers.upsertGuildApplicationCommands;
    deleteFollowupMessage: typeof helpers.deleteFollowupMessage;
    deleteOriginalInteractionResponse: typeof helpers.deleteOriginalInteractionResponse;
    editFollowupMessage: typeof helpers.editFollowupMessage;
    editOriginalInteractionResponse: typeof helpers.editOriginalInteractionResponse;
    getFollowupMessage: typeof helpers.getFollowupMessage;
    getOriginalInteractionResponse: typeof helpers.getOriginalInteractionResponse;
    sendFollowupMessage: typeof helpers.sendFollowupMessage;
    sendInteractionResponse: typeof helpers.sendInteractionResponse;
    banMember: typeof helpers.banMember;
    editBotMember: typeof helpers.editBotMember;
    editMember: typeof helpers.editMember;
    fetchMembers: typeof helpers.fetchMembers;
    getAvatarURL: typeof helpers.getAvatarURL;
    getDmChannel: typeof helpers.getDmChannel;
    getMember: typeof helpers.getMember;
    getMembers: typeof helpers.getMembers;
    kickMember: typeof helpers.kickMember;
    pruneMembers: typeof helpers.pruneMembers;
    searchMembers: typeof helpers.searchMembers;
    unbanMember: typeof helpers.unbanMember;
    addReaction: typeof helpers.addReaction;
    addReactions: typeof helpers.addReactions;
    deleteOwnReaction: typeof helpers.deleteOwnReaction;
    deleteUserReaction: typeof helpers.deleteUserReaction;
    deleteReactionsAll: typeof helpers.deleteReactionsAll;
    deleteReactionsEmoji: typeof helpers.deleteReactionsEmoji;
    getReactions: typeof helpers.getReactions;
    processReactionString: typeof helpers.processReactionString;
    deleteMessage: typeof helpers.deleteMessage;
    deleteMessages: typeof helpers.deleteMessages;
    editMessage: typeof helpers.editMessage;
    getMessage: typeof helpers.getMessage;
    getMessages: typeof helpers.getMessages;
    isGetMessagesAfter: typeof helpers.isGetMessagesAfter;
    isGetMessagesBefore: typeof helpers.isGetMessagesBefore;
    isGetMessagesAround: typeof helpers.isGetMessagesAround;
    isGetMessagesLimit: typeof helpers.isGetMessagesLimit;
    getPinnedMessages: typeof helpers.getPinnedMessages;
    pinMessage: typeof helpers.pinMessage;
    crosspostMessage: typeof helpers.crosspostMessage;
    publishMessage: typeof helpers.crosspostMessage;
    sendMessage: typeof helpers.sendMessage;
    unpinMessage: typeof helpers.unpinMessage;
    editBotProfile: typeof helpers.editBotProfile;
    editBotStatus: typeof helpers.editBotStatus;
    editShardStatus: typeof helpers.editShardStatus;
    getApplicationInfo: typeof helpers.getApplicationInfo;
    getGatewayBot: typeof helpers.getGatewayBot;
    getNitroStickerPacks: typeof helpers.getNitroStickerPacks;
    getUser: typeof helpers.getUser;
    addRole: typeof helpers.addRole;
    createRole: typeof helpers.createRole;
    deleteRole: typeof helpers.deleteRole;
    editRole: typeof helpers.editRole;
    modifyRolePositions: typeof helpers.modifyRolePositions;
    getRoles: typeof helpers.getRoles;
    removeRole: typeof helpers.removeRole;
    createGuildSticker: typeof helpers.createGuildSticker;
    deleteGuildSticker: typeof helpers.deleteGuildSticker;
    editGuildSticker: typeof helpers.editGuildSticker;
    getGuildSticker: typeof helpers.getGuildSticker;
    getGuildStickers: typeof helpers.getGuildStickers;
    getSticker: typeof helpers.getSticker;
    createGuildFromTemplate: typeof helpers.createGuildFromTemplate;
    createGuildTemplate: typeof helpers.createGuildTemplate;
    deleteGuildTemplate: typeof helpers.deleteGuildTemplate;
    editGuildTemplate: typeof helpers.editGuildTemplate;
    getGuildTemplate: typeof helpers.getGuildTemplate;
    getGuildTemplates: typeof helpers.getGuildTemplates;
    syncGuildTemplate: typeof helpers.syncGuildTemplate;
    createWebhook: typeof helpers.createWebhook;
    deleteWebhook: typeof helpers.deleteWebhook;
    deleteWebhookMessage: typeof helpers.deleteWebhookMessage;
    deleteWebhookWithToken: typeof helpers.deleteWebhookWithToken;
    editOriginalWebhookMessage: typeof helpers.editOriginalWebhookMessage;
    editWebhook: typeof helpers.editWebhook;
    editWebhookMessage: typeof helpers.editWebhookMessage;
    editWebhookWithToken: typeof helpers.editWebhookWithToken;
    executeWebhook: typeof helpers.executeWebhook;
    sendWebhookMessage: typeof helpers.executeWebhook;
    getChannelWebhooks: typeof helpers.getChannelWebhooks;
    getGuildWebhooks: typeof helpers.getGuildWebhooks;
    getWebhook: typeof helpers.getWebhook;
    getWebhookMessage: typeof helpers.getWebhookMessage;
    getWebhookWithToken: typeof helpers.getWebhookWithToken;
};
export interface Transformers {
    reverse: {
        allowedMentions: (bot: Bot, payload: AllowedMentions) => DiscordAllowedMentions;
        embed: (bot: Bot, payload: Embed) => DiscordEmbed;
        component: (bot: Bot, payload: Component) => DiscordComponent;
        activity: (bot: Bot, payload: Activity) => DiscordActivity;
        member: (bot: Bot, payload: Member) => DiscordMember;
        user: (bot: Bot, payload: User) => DiscordUser;
        team: (bot: Bot, payload: Team) => DiscordTeam;
        application: (bot: Bot, payload: Application) => DiscordApplication;
        snowflake: (snowflake: BigString) => string;
        createApplicationCommand: (bot: Bot, payload: CreateApplicationCommand) => DiscordCreateApplicationCommand;
        applicationCommand: (bot: Bot, payload: ApplicationCommand) => DiscordApplicationCommand;
        applicationCommandOption: (bot: Bot, payload: ApplicationCommandOption) => DiscordApplicationCommandOption;
        applicationCommandOptionChoice: (bot: Bot, payload: ApplicationCommandOptionChoice) => DiscordApplicationCommandOptionChoice;
        interactionResponse: (bot: Bot, payload: InteractionResponse) => DiscordInteractionResponse;
        attachment: (bot: Bot, payload: Attachment) => DiscordAttachment;
    };
    snowflake: (snowflake: BigString) => bigint;
    gatewayBot: (payload: DiscordGetGatewayBot) => GetGatewayBot;
    automodRule: (bot: Bot, payload: DiscordAutoModerationRule) => AutoModerationRule;
    automodActionExecution: (bot: Bot, payload: DiscordAutoModerationActionExecution) => AutoModerationActionExecution;
    channel: (bot: Bot, payload: {
        channel: DiscordChannel;
    } & {
        guildId?: bigint;
    }) => Channel;
    guild: (bot: Bot, payload: {
        guild: DiscordGuild;
    } & {
        shardId: number;
    }) => Guild;
    user: (bot: Bot, payload: DiscordUser) => User;
    member: (bot: Bot, payload: DiscordMember, guildId: bigint, userId: bigint) => Member;
    message: (bot: Bot, payload: DiscordMessage) => Message;
    role: (bot: Bot, payload: {
        role: DiscordRole;
    } & {
        guildId: bigint;
    }) => Role;
    voiceState: (bot: Bot, payload: {
        voiceState: DiscordVoiceState;
    } & {
        guildId: bigint;
    }) => VoiceState;
    interaction: (bot: Bot, payload: DiscordInteraction) => Interaction;
    interactionDataOptions: (bot: Bot, payload: DiscordInteractionDataOption) => InteractionDataOption;
    integration: (bot: Bot, payload: DiscordIntegrationCreateUpdate) => Integration;
    invite: (bot: Bot, invite: DiscordInviteCreate) => Invite;
    application: (bot: Bot, payload: DiscordApplication) => Application;
    team: (bot: Bot, payload: DiscordTeam) => Team;
    emoji: (bot: Bot, payload: DiscordEmoji) => Emoji;
    activity: (bot: Bot, payload: DiscordActivity) => Activity;
    presence: (bot: Bot, payload: DiscordPresenceUpdate) => PresenceUpdate;
    attachment: (bot: Bot, payload: DiscordAttachment) => Attachment;
    embed: (bot: Bot, payload: DiscordEmbed) => Embed;
    component: (bot: Bot, payload: DiscordComponent) => Component;
    webhook: (bot: Bot, payload: DiscordWebhook) => Webhook;
    auditLogEntry: (bot: Bot, payload: DiscordAuditLogEntry) => AuditLogEntry;
    applicationCommand: (bot: Bot, payload: DiscordApplicationCommand) => ApplicationCommand;
    applicationCommandOption: (bot: Bot, payload: DiscordApplicationCommandOption) => ApplicationCommandOption;
    applicationCommandPermission: (bot: Bot, payload: DiscordGuildApplicationCommandPermissions) => ApplicationCommandPermission;
    scheduledEvent: (bot: Bot, payload: DiscordScheduledEvent) => ScheduledEvent;
    threadMember: (bot: Bot, payload: DiscordThreadMember) => ThreadMember;
    welcomeScreen: (bot: Bot, payload: DiscordWelcomeScreen) => WelcomeScreen;
    voiceRegion: (bot: Bot, payload: DiscordVoiceRegion) => VoiceRegions;
    widget: (bot: Bot, payload: DiscordGuildWidget) => GuildWidget;
    widgetSettings: (bot: Bot, payload: DiscordGuildWidgetSettings) => GuildWidgetSettings;
    stageInstance: (bot: Bot, payload: DiscordStageInstance) => StageInstance;
    sticker: (bot: Bot, payload: DiscordSticker) => Sticker;
    stickerPack: (bot: Bot, payload: DiscordStickerPack) => StickerPack;
    applicationCommandOptionChoice: (bot: Bot, payload: DiscordApplicationCommandOptionChoice) => ApplicationCommandOptionChoice;
    template: (bot: Bot, payload: DiscordTemplate) => Template;
}
export declare function createTransformers(options: Partial<Transformers>): {
    reverse: {
        allowedMentions: (bot: Bot, payload: AllowedMentions) => DiscordAllowedMentions;
        embed: (bot: Bot, payload: Embed) => DiscordEmbed;
        component: (bot: Bot, payload: Component) => DiscordComponent;
        activity: (bot: Bot, payload: Activity) => DiscordActivity;
        member: (bot: Bot, payload: Member) => DiscordMember;
        user: (bot: Bot, payload: User) => DiscordUser;
        team: (bot: Bot, payload: Team) => DiscordTeam;
        application: (bot: Bot, payload: Application) => DiscordApplication;
        snowflake: typeof bigintToSnowflake;
        createApplicationCommand: (bot: Bot, payload: CreateApplicationCommand) => DiscordCreateApplicationCommand;
        applicationCommand: (bot: Bot, payload: ApplicationCommand) => DiscordApplicationCommand;
        applicationCommandOption: (bot: Bot, payload: ApplicationCommandOption) => DiscordApplicationCommandOption;
        applicationCommandOptionChoice: (bot: Bot, payload: ApplicationCommandOptionChoice) => DiscordApplicationCommandOptionChoice;
        interactionResponse: (bot: Bot, payload: InteractionResponse) => DiscordInteractionResponse;
        attachment: (bot: Bot, payload: Attachment) => DiscordAttachment;
    };
    automodRule: typeof transformAutoModerationRule;
    automodActionExecution: typeof transformAutoModerationActionExecution;
    activity: (bot: Bot, payload: DiscordActivity) => Activity;
    application: typeof transformApplication;
    attachment: (bot: Bot, payload: DiscordAttachment) => Attachment;
    channel: (bot: Bot, payload: {
        channel: DiscordChannel;
    } & {
        guildId?: bigint | undefined;
    }) => Channel;
    component: (bot: Bot, payload: DiscordComponent) => Component;
    embed: typeof transformEmbed;
    emoji: typeof transformEmoji;
    guild: typeof transformGuild;
    integration: (bot: Bot, payload: DiscordIntegrationCreateUpdate) => Integration;
    interaction: (bot: Bot, payload: DiscordInteraction) => Interaction;
    interactionDataOptions: (bot: Bot, payload: DiscordInteractionDataOption) => InteractionDataOption;
    invite: (bot: Bot, invite: DiscordInviteCreate) => Invite;
    member: (bot: Bot, payload: DiscordMember, guildId: bigint, userId: bigint) => Member;
    message: (bot: Bot, payload: DiscordMessage) => Message;
    presence: (bot: Bot, payload: DiscordPresenceUpdate) => PresenceUpdate;
    role: (bot: Bot, payload: {
        role: DiscordRole;
    } & {
        guildId: bigint;
    }) => Role;
    user: (bot: Bot, payload: DiscordUser) => User;
    team: (bot: Bot, payload: DiscordTeam) => Team;
    voiceState: (bot: Bot, payload: {
        voiceState: DiscordVoiceState;
    } & {
        guildId: bigint;
    }) => VoiceState;
    snowflake: (snowflake: BigString) => bigint;
    webhook: typeof transformWebhook;
    auditLogEntry: (bot: Bot, payload: DiscordAuditLogEntry) => AuditLogEntry;
    applicationCommand: typeof transformApplicationCommand;
    applicationCommandOption: (bot: Bot, payload: DiscordApplicationCommandOption) => ApplicationCommandOption;
    applicationCommandPermission: typeof transformApplicationCommandPermission;
    scheduledEvent: (bot: Bot, payload: DiscordScheduledEvent) => ScheduledEvent;
    threadMember: typeof transformThreadMember;
    welcomeScreen: typeof transformWelcomeScreen;
    voiceRegion: typeof transformVoiceRegion;
    widget: typeof transformWidget;
    widgetSettings: typeof transformWidgetSettings;
    stageInstance: typeof transformStageInstance;
    sticker: (bot: Bot, payload: DiscordSticker) => Sticker;
    stickerPack: typeof transformStickerPack;
    gatewayBot: typeof transformGatewayBot;
    applicationCommandOptionChoice: typeof transformApplicationCommandOptionChoice;
    template: typeof transformTemplate;
};
export interface EventHandlers {
    debug: (text: string, ...args: any[]) => unknown;
    auditLogEntryCreate: (bot: Bot, log: AuditLogEntry, guildId: bigint) => unknown;
    automodRuleCreate: (bot: Bot, rule: AutoModerationRule) => unknown;
    automodRuleUpdate: (bot: Bot, rule: AutoModerationRule) => unknown;
    automodRuleDelete: (bot: Bot, rule: AutoModerationRule) => unknown;
    automodActionExecution: (bot: Bot, payload: AutoModerationActionExecution) => unknown;
    threadCreate: (bot: Bot, thread: Channel) => unknown;
    threadDelete: (bot: Bot, thread: Channel) => unknown;
    threadMemberUpdate: (bot: Bot, payload: {
        id: bigint;
        guildId: bigint;
        joinedAt: number;
        flags: number;
    }) => unknown;
    threadMembersUpdate: (bot: Bot, payload: {
        id: bigint;
        guildId: bigint;
        addedMembers?: ThreadMember[];
        removedMemberIds?: bigint[];
    }) => unknown;
    threadUpdate: (bot: Bot, thread: Channel) => unknown;
    scheduledEventCreate: (bot: Bot, event: ScheduledEvent) => unknown;
    scheduledEventUpdate: (bot: Bot, event: ScheduledEvent) => unknown;
    scheduledEventDelete: (bot: Bot, event: ScheduledEvent) => unknown;
    /** Sent when a user has subscribed to a guild scheduled event. EXPERIMENTAL! */
    scheduledEventUserAdd: (bot: Bot, payload: {
        guildScheduledEventId: bigint;
        guildId: bigint;
        userId: bigint;
    }) => unknown;
    /** Sent when a user has unsubscribed to a guild scheduled event. EXPERIMENTAL! */
    scheduledEventUserRemove: (bot: Bot, payload: {
        guildScheduledEventId: bigint;
        guildId: bigint;
        userId: bigint;
    }) => unknown;
    ready: (bot: Bot, payload: {
        shardId: number;
        v: number;
        user: User;
        guilds: bigint[];
        sessionId: string;
        shard?: number[];
        applicationId: bigint;
    }, rawPayload: DiscordReady) => unknown;
    interactionCreate: (bot: Bot, interaction: Interaction) => unknown;
    integrationCreate: (bot: Bot, integration: Integration) => unknown;
    integrationDelete: (bot: Bot, payload: {
        id: bigint;
        guildId: bigint;
        applicationId?: bigint;
    }) => unknown;
    integrationUpdate: (bot: Bot, payload: {
        guildId: bigint;
    }) => unknown;
    inviteCreate: (bot: Bot, invite: Invite) => unknown;
    inviteDelete: (bot: Bot, payload: {
        channelId: bigint;
        guildId?: bigint;
        code: string;
    }) => unknown;
    guildMemberAdd: (bot: Bot, member: Member, user: User) => unknown;
    guildMemberRemove: (bot: Bot, user: User, guildId: bigint) => unknown;
    guildMemberUpdate: (bot: Bot, member: Member, user: User) => unknown;
    messageCreate: (bot: Bot, message: Message) => unknown;
    messageDelete: (bot: Bot, payload: {
        id: bigint;
        channelId: bigint;
        guildId?: bigint;
    }, message?: Message) => unknown;
    messageDeleteBulk: (bot: Bot, payload: {
        ids: bigint[];
        channelId: bigint;
        guildId?: bigint;
    }) => unknown;
    messageUpdate: (bot: Bot, message: Message, oldMessage?: Message) => unknown;
    reactionAdd: (bot: Bot, payload: {
        userId: bigint;
        channelId: bigint;
        messageId: bigint;
        guildId?: bigint;
        member?: Member;
        user?: User;
        emoji: Emoji;
    }) => unknown;
    reactionRemove: (bot: Bot, payload: {
        userId: bigint;
        channelId: bigint;
        messageId: bigint;
        guildId?: bigint;
        emoji: Emoji;
    }) => unknown;
    reactionRemoveEmoji: (bot: Bot, payload: {
        channelId: bigint;
        messageId: bigint;
        guildId?: bigint;
        emoji: Emoji;
    }) => unknown;
    reactionRemoveAll: (bot: Bot, payload: {
        channelId: bigint;
        messageId: bigint;
        guildId?: bigint;
    }) => unknown;
    presenceUpdate: (bot: Bot, presence: PresenceUpdate, oldPresence?: PresenceUpdate) => unknown;
    voiceServerUpdate: (bot: Bot, payload: {
        token: string;
        endpoint?: string;
        guildId: bigint;
    }) => unknown;
    voiceStateUpdate: (bot: Bot, voiceState: VoiceState) => unknown;
    channelCreate: (bot: Bot, channel: Channel) => unknown;
    dispatchRequirements: (bot: Bot, data: DiscordGatewayPayload, shardId: number) => unknown;
    channelDelete: (bot: Bot, channel: Channel) => unknown;
    channelPinsUpdate: (bot: Bot, data: {
        guildId?: bigint;
        channelId: bigint;
        lastPinTimestamp?: number;
    }) => unknown;
    channelUpdate: (bot: Bot, channel: Channel) => unknown;
    stageInstanceCreate: (bot: Bot, data: {
        id: bigint;
        guildId: bigint;
        channelId: bigint;
        topic: string;
    }) => unknown;
    stageInstanceDelete: (bot: Bot, data: {
        id: bigint;
        guildId: bigint;
        channelId: bigint;
        topic: string;
    }) => unknown;
    stageInstanceUpdate: (bot: Bot, data: {
        id: bigint;
        guildId: bigint;
        channelId: bigint;
        topic: string;
    }) => unknown;
    guildEmojisUpdate: (bot: Bot, payload: {
        guildId: bigint;
        emojis: Collection<bigint, DiscordEmoji>;
    }) => unknown;
    guildBanAdd: (bot: Bot, user: User, guildId: bigint) => unknown;
    guildBanRemove: (bot: Bot, user: User, guildId: bigint) => unknown;
    guildCreate: (bot: Bot, guild: Guild) => unknown;
    guildDelete: (bot: Bot, id: bigint, shardId: number) => unknown;
    guildUpdate: (bot: Bot, guild: Guild) => unknown;
    raw: (bot: Bot, data: DiscordGatewayPayload, shardId: number) => unknown;
    roleCreate: (bot: Bot, role: Role) => unknown;
    roleDelete: (bot: Bot, payload: {
        guildId: bigint;
        roleId: bigint;
    }) => unknown;
    roleUpdate: (bot: Bot, role: Role) => unknown;
    webhooksUpdate: (bot: Bot, payload: {
        channelId: bigint;
        guildId: bigint;
    }) => unknown;
    botUpdate: (bot: Bot, user: User) => unknown;
    typingStart: (bot: Bot, payload: {
        guildId: bigint | undefined;
        channelId: bigint;
        userId: bigint;
        timestamp: number;
        member: Member | undefined;
    }) => unknown;
}
export declare function createBotConstants(): {
    DISCORDENO_VERSION: string;
    USER_AGENT: string;
    BASE_URL: string;
    CDN_URL: string;
    routes: {
        GATEWAY_BOT: () => string;
        AUTOMOD_RULES: (guildId: BigString) => string;
        AUTOMOD_RULE: (guildId: BigString, ruleId: BigString) => string;
        CHANNEL: (channelId: BigString) => string;
        CHANNEL_MESSAGE: (channelId: BigString, messageId: BigString) => string;
        CHANNEL_MESSAGES: (channelId: BigString, options?: helpers.GetMessagesOptions | undefined) => string;
        CHANNEL_PIN: (channelId: BigString, messageId: BigString) => string;
        CHANNEL_PINS: (channelId: BigString) => string;
        CHANNEL_BULK_DELETE: (channelId: BigString) => string;
        CHANNEL_INVITES: (channelId: BigString) => string;
        CHANNEL_WEBHOOKS: (channelId: BigString) => string;
        CHANNEL_MESSAGE_REACTION_ME: (channelId: BigString, messageId: BigString, emoji: string) => string;
        CHANNEL_MESSAGE_REACTION_USER: (channelId: BigString, messageId: BigString, emoji: string, userId: BigString) => string;
        CHANNEL_MESSAGE_REACTIONS: (channelId: BigString, messageId: BigString) => string;
        CHANNEL_MESSAGE_REACTION: (channelId: BigString, messageId: BigString, emoji: string, options?: helpers.GetReactions | undefined) => string;
        CHANNEL_FOLLOW: (channelId: BigString) => string;
        CHANNEL_MESSAGE_CROSSPOST: (channelId: BigString, messageId: BigString) => string;
        CHANNEL_OVERWRITE: (channelId: BigString, overwriteId: BigString) => string;
        CHANNEL_TYPING: (channelId: BigString) => string;
        THREAD_START_PUBLIC: (channelId: BigString, messageId: BigString) => string;
        THREAD_START_PRIVATE: (channelId: BigString) => string;
        THREAD_ACTIVE: (guildId: BigString) => string;
        THREAD_MEMBERS: (channelId: BigString) => string;
        THREAD_ME: (channelId: BigString) => string;
        THREAD_USER: (channelId: BigString, userId: BigString) => string;
        THREAD_ARCHIVED: (channelId: BigString) => string;
        THREAD_ARCHIVED_PUBLIC: (channelId: BigString, options?: helpers.ListArchivedThreads | undefined) => string;
        THREAD_ARCHIVED_PRIVATE: (channelId: BigString, options?: helpers.ListArchivedThreads | undefined) => string;
        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: BigString, options?: helpers.ListArchivedThreads | undefined) => string;
        FORUM_START: (channelId: BigString) => string;
        GUILD: (guildId: BigString, withCounts?: boolean | undefined) => string;
        GUILDS: () => string;
        GUILD_AUDIT_LOGS: (guildId: BigString, options?: helpers.GetGuildAuditLog | undefined) => string;
        GUILD_BAN: (guildId: BigString, userId: BigString) => string;
        GUILD_BANS: (guildId: BigString, options?: helpers.GetBans | undefined) => string;
        GUILD_BANNER: (guildId: BigString, icon: string) => string;
        GUILD_CHANNELS: (guildId: BigString) => string;
        GUILD_WIDGET: (guildId: BigString) => string;
        GUILD_WIDGET_JSON: (guildId: BigString) => string;
        GUILD_WIDGET_IMAGE: (guildId: BigString, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
        GUILD_EMOJI: (guildId: BigString, emojiId: BigString) => string;
        GUILD_EMOJIS: (guildId: BigString) => string;
        GUILD_ICON: (guildId: BigString, icon: string) => string;
        GUILD_INTEGRATION: (guildId: BigString, integrationId: BigString) => string;
        GUILD_INTEGRATION_SYNC: (guildId: BigString, integrationId: BigString) => string;
        GUILD_INTEGRATIONS: (guildId: BigString) => string;
        GUILD_INVITES: (guildId: BigString) => string;
        GUILD_LEAVE: (guildId: BigString) => string;
        GUILD_MEMBER: (guildId: BigString, userId: BigString) => string;
        GUILD_MEMBERS: (guildId: BigString, options?: helpers.ListGuildMembers | undefined) => string;
        GUILD_MEMBER_ROLE: (guildId: BigString, memberId: BigString, roleId: BigString) => string;
        GUILD_MEMBERS_SEARCH: (guildId: BigString, query: string, options?: {
            limit?: number | undefined;
        } | undefined) => string;
        GUILD_PRUNE: (guildId: BigString, options?: helpers.GetGuildPruneCountQuery | undefined) => string;
        GUILD_REGIONS: (guildId: BigString) => string;
        GUILD_ROLE: (guildId: BigString, roleId: BigString) => string;
        GUILD_ROLES: (guildId: BigString) => string;
        GUILD_SPLASH: (guildId: BigString, icon: string) => string;
        GUILD_VANITY_URL: (guildId: BigString) => string;
        GUILD_WEBHOOKS: (guildId: BigString) => string;
        TEMPLATE: (code: string) => string;
        GUILD_TEMPLATE: (guildId: BigString, code: string) => string;
        GUILD_TEMPLATES: (guildId: BigString) => string;
        GUILD_PREVIEW: (guildId: BigString) => string;
        UPDATE_VOICE_STATE: (guildId: BigString, userId?: BigString | undefined) => string;
        GUILD_WELCOME_SCREEN: (guildId: BigString) => string;
        GUILD_SCHEDULED_EVENTS: (guildId: BigString, withUserCount?: boolean | undefined) => string;
        GUILD_SCHEDULED_EVENT: (guildId: BigString, eventId: BigString, withUserCount?: boolean | undefined) => string;
        GUILD_SCHEDULED_EVENT_USERS: (guildId: BigString, eventId: BigString, options?: helpers.GetScheduledEventUsers | undefined) => string;
        GUILD_MFA_LEVEL: (guildId: BigString) => string;
        VOICE_REGIONS: () => string;
        INVITE: (inviteCode: string, options?: helpers.GetInvite | undefined) => string;
        WEBHOOK: (webhookId: BigString, token: string, options?: {
            wait?: boolean | undefined;
            threadId?: BigString | undefined;
        } | undefined) => string;
        WEBHOOK_ID: (webhookId: BigString) => string;
        WEBHOOK_MESSAGE: (webhookId: BigString, token: string, messageId: BigString, options?: {
            threadId?: BigString | undefined;
        } | undefined) => string;
        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: BigString, token: string, options?: {
            threadId?: BigString | undefined;
        } | undefined) => string;
        WEBHOOK_SLACK: (webhookId: BigString, token: string) => string;
        WEBHOOK_GITHUB: (webhookId: BigString, token: string) => string;
        COMMANDS: (applicationId: BigString) => string;
        COMMANDS_GUILD: (applicationId: BigString, guildId: BigString) => string;
        COMMANDS_PERMISSIONS: (applicationId: BigString, guildId: BigString) => string;
        COMMANDS_PERMISSION: (applicationId: BigString, guildId: BigString, commandId: BigString) => string;
        COMMANDS_ID: (applicationId: BigString, commandId: BigString, withLocalizations?: boolean | undefined) => string;
        COMMANDS_GUILD_ID: (applicationId: BigString, guildId: BigString, commandId: BigString, withLocalizations?: boolean | undefined) => string;
        INTERACTION_ID_TOKEN: (interactionId: BigString, token: string) => string;
        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: BigString, token: string) => string;
        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: BigString, token: string, messageId: BigString) => string;
        USER: (userId: BigString) => string;
        USER_BOT: () => string;
        USER_GUILDS: () => string;
        USER_AVATAR: (userId: BigString, icon: string) => string;
        USER_DEFAULT_AVATAR: (icon: number) => string;
        USER_DM: () => string;
        USER_CONNECTIONS: () => string;
        USER_NICK: (guildId: BigString) => string;
        DISCOVERY_CATEGORIES: () => string;
        DISCOVERY_VALID_TERM: (term: string) => string;
        DISCOVERY_METADATA: (guildId: BigString) => string;
        DISCOVERY_SUBCATEGORY: (guildId: BigString, categoryId: number) => string;
        OAUTH2_APPLICATION: () => string;
        STAGE_INSTANCES: () => string;
        STAGE_INSTANCE: (channelId: BigString) => string;
        NITRO_STICKER_PACKS: () => string;
        STICKER: (stickerId: bigint) => string;
        GUILD_STICKERS: (guildId: bigint) => string;
        GUILD_STICKER: (guildId: bigint, stickerId: bigint) => string;
    };
    regexes: {
        SLASH_COMMANDS_NAME_REGEX: RegExp;
        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
        CHANNEL_MENTION_REGEX: RegExp;
        DISCORD_SNOWFLAKE_REGEX: RegExp;
    };
    Errors: typeof Errors;
};
export interface BotGatewayHandlerOptions {
    READY: typeof handlers.handleReady;
    CHANNEL_CREATE: typeof handlers.handleChannelCreate;
    CHANNEL_DELETE: typeof handlers.handleChannelDelete;
    CHANNEL_PINS_UPDATE: typeof handlers.handleChannelPinsUpdate;
    CHANNEL_UPDATE: typeof handlers.handleChannelUpdate;
    THREAD_CREATE: typeof handlers.handleThreadCreate;
    THREAD_UPDATE: typeof handlers.handleThreadUpdate;
    THREAD_DELETE: typeof handlers.handleThreadDelete;
    THREAD_LIST_SYNC: typeof handlers.handleThreadListSync;
    THREAD_MEMBERS_UPDATE: typeof handlers.handleThreadMembersUpdate;
    STAGE_INSTANCE_CREATE: typeof handlers.handleStageInstanceCreate;
    STAGE_INSTANCE_UPDATE: typeof handlers.handleStageInstanceUpdate;
    STAGE_INSTANCE_DELETE: typeof handlers.handleStageInstanceDelete;
    GUILD_AUDIT_LOG_ENTRY_CREATE: typeof handlers.handleGuildAuditLogEntryCreate;
    GUILD_BAN_ADD: typeof handlers.handleGuildBanAdd;
    GUILD_BAN_REMOVE: typeof handlers.handleGuildBanRemove;
    GUILD_CREATE: typeof handlers.handleGuildCreate;
    GUILD_DELETE: typeof handlers.handleGuildDelete;
    GUILD_EMOJIS_UPDATE: typeof handlers.handleGuildEmojisUpdate;
    GUILD_INTEGRATIONS_UPDATE: typeof handlers.handleGuildIntegrationsUpdate;
    GUILD_MEMBER_ADD: typeof handlers.handleGuildMemberAdd;
    GUILD_MEMBER_REMOVE: typeof handlers.handleGuildMemberRemove;
    GUILD_MEMBER_UPDATE: typeof handlers.handleGuildMemberUpdate;
    GUILD_MEMBERS_CHUNK: typeof handlers.handleGuildMembersChunk;
    GUILD_ROLE_CREATE: typeof handlers.handleGuildRoleCreate;
    GUILD_ROLE_DELETE: typeof handlers.handleGuildRoleDelete;
    GUILD_ROLE_UPDATE: typeof handlers.handleGuildRoleUpdate;
    GUILD_SCHEDULED_EVENT_CREATE: typeof handlers.handleGuildScheduledEventCreate;
    GUILD_SCHEDULED_EVENT_DELETE: typeof handlers.handleGuildScheduledEventDelete;
    GUILD_SCHEDULED_EVENT_UPDATE: typeof handlers.handleGuildScheduledEventUpdate;
    GUILD_SCHEDULED_EVENT_USER_ADD: typeof handlers.handleGuildScheduledEventUserAdd;
    GUILD_SCHEDULED_EVENT_USER_REMOVE: typeof handlers.handleGuildScheduledEventUserRemove;
    GUILD_UPDATE: typeof handlers.handleGuildUpdate;
    INTERACTION_CREATE: typeof handlers.handleInteractionCreate;
    INVITE_CREATE: typeof handlers.handleInviteCreate;
    INVITE_DELETE: typeof handlers.handleInviteCreate;
    MESSAGE_CREATE: typeof handlers.handleMessageCreate;
    MESSAGE_DELETE_BULK: typeof handlers.handleMessageDeleteBulk;
    MESSAGE_DELETE: typeof handlers.handleMessageDelete;
    MESSAGE_REACTION_ADD: typeof handlers.handleMessageReactionAdd;
    MESSAGE_REACTION_REMOVE_ALL: typeof handlers.handleMessageReactionRemoveAll;
    MESSAGE_REACTION_REMOVE_EMOJI: typeof handlers.handleMessageReactionRemoveEmoji;
    MESSAGE_REACTION_REMOVE: typeof handlers.handleMessageReactionRemove;
    MESSAGE_UPDATE: typeof handlers.handleMessageUpdate;
    PRESENCE_UPDATE: typeof handlers.handlePresenceUpdate;
    TYPING_START: typeof handlers.handleTypingStart;
    USER_UPDATE: typeof handlers.handleUserUpdate;
    VOICE_SERVER_UPDATE: typeof handlers.handleVoiceServerUpdate;
    VOICE_STATE_UPDATE: typeof handlers.handleVoiceStateUpdate;
    WEBHOOKS_UPDATE: typeof handlers.handleWebhooksUpdate;
    INTEGRATION_CREATE: typeof handlers.handleIntegrationCreate;
    INTEGRATION_UPDATE: typeof handlers.handleIntegrationUpdate;
    INTEGRATION_DELETE: typeof handlers.handleIntegrationDelete;
}
export declare function createBotGatewayHandlers(options: Partial<BotGatewayHandlerOptions>): Record<GatewayDispatchEventNames, (bot: Bot, data: DiscordGatewayPayload, shardId: number) => any>;
export declare type RemoveFirstFromTuple<T extends any[]> = T["length"] extends 0 ? [] : ((...b: T) => void) extends (a: any, ...b: infer I) => void ? I : [];
export declare type FinalHelpers = {
    [K in keyof Helpers]: (...args: RemoveFirstFromTuple<Parameters<Helpers[K]>>) => ReturnType<Helpers[K]>;
};
