import type { Bot } from "../../bot.js";
import { Embed } from "../../transformers/embed.js";
import { Message } from "../../transformers/message.js";
import { AllowedMentions, FileContent, MessageComponents } from "../../types/discordeno.js";
import { BigString } from "../../types/shared.js";
export declare const sendWebhookMessage: typeof executeWebhook;
/**
 * Executes a webhook, causing a message to be posted in the channel configured for the webhook.
 *
 * @param bot - The bot instance to use to make the request.
 * @param webhookId - The ID of the webhook to execute.
 * @param token - The webhook token, used to execute the webhook.
 * @param options - The parameters for the execution of the webhook.
 * @returns An instance of the created {@link Message}, or `undefined` if the {@link ExecuteWebhook.wait | wait} property of the {@link options} object parameter is set to `false`.
 *
 * @remarks
 * If the webhook channel is a forum channel, you must provide a value for either `threadId` or `threadName`.
 *
 * @see {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}
 */
export declare function executeWebhook(bot: Bot, webhookId: BigString, token: string, options: ExecuteWebhook): Promise<Message | undefined>;
/** https://discord.com/developers/docs/resources/webhook#execute-webhook */
export interface ExecuteWebhook {
    /** Waits for server confirmation of message send before response, and returns the created message body (defaults to `false`; when `false` a message that is not saved does not return an error) */
    wait?: boolean;
    /** Send a message to the specified thread within a webhook's channel. The thread will automatically be unarchived. */
    threadId?: BigString;
    /** Name of the thread to create (target channel has to be type of forum channel) */
    threadName?: string;
    /** The message contents (up to 2000 characters) */
    content?: string;
    /** Override the default username of the webhook */
    username?: string;
    /** Override the default avatar of the webhook */
    avatarUrl?: string;
    /** True if this is a TTS message */
    tts?: boolean;
    /** The contents of the file being sent */
    file?: FileContent | FileContent[];
    /** Embedded `rich` content */
    embeds?: Embed[];
    /** Allowed mentions for the message */
    allowedMentions?: AllowedMentions;
    /** the components to include with the message */
    components?: MessageComponents;
}
