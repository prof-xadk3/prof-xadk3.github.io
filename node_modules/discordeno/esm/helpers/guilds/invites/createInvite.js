/**
 * Creates an invite to a channel in a guild.
 *
 * @param bot - The bot instance to use to make the request.
 * @param channelId - The ID of the channel to create the invite to.
 * @param options - The parameters for the creation of the invite.
 * @returns An instance of the created {@link BaseInvite | Invite}.
 *
 * @remarks
 * Requires the `CREATE_INSTANT_INVITE` permission.
 *
 * Fires an _Invite Create_ gateway event.
 *
 * @privateRemarks
 * The request body is not optional, and an empty JSON object must be sent regardless of whether any fields are being transmitted.
 *
 * @see {@link https://discord.com/developers/docs/resources/channel#create-channel-invite}
 */
export async function createInvite(bot, channelId, options = {}) {
    const result = await bot.rest.runMethod(bot.rest, "POST", bot.constants.routes.CHANNEL_INVITES(channelId), {
        max_age: options.maxAge,
        max_uses: options.maxUses,
        temporary: options.temporary,
        unique: options.unique,
        target_type: options.targetType,
        target_user_id: options.targetUserId?.toString(),
        target_application_id: options.targetApplicationId?.toString(),
        reason: options.reason,
    });
    return {
        code: result.code,
        guildId: result.guild?.id ? bot.transformers.snowflake(result.guild.id) : undefined,
        channelId: result.channel?.id ? bot.transformers.snowflake(result.channel.id) : undefined,
        inviter: result.inviter ? bot.transformers.user(bot, result.inviter) : undefined,
        targetType: result.target_type,
        targetUser: result.target_user ? bot.transformers.user(bot, result.target_user) : undefined,
        targetApplicationId: result.target_application?.id
            ? bot.transformers.snowflake(result.target_application.id)
            : undefined,
        approximatePresenceCount: result.approximate_presence_count,
        approximateMemberCount: result.approximate_member_count,
        expiresAt: result.expires_at ? Date.parse(result.expires_at) : undefined,
    };
}
