import { ChannelTypes } from "../../types/shared.js";
/**
 * Creates a channel within a guild.
 *
 * @param bot - The bot instance to use to make the request.
 * @param guildId - The ID of the guild to create the channel within.
 * @param options - The parameters for the creation of the channel.
 * @returns An instance of the created {@link Channel}.
 *
 * @remarks
 * Requires the `MANAGE_CHANNELS` permission.
 *
 * If setting permission overwrites, only the permissions the bot user has in the guild can be allowed or denied.
 *
 * Setting the `MANAGE_ROLES` permission is only possible for guild administrators.
 *
 * Fires a _Channel Create_ gateway event.
 *
 * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-channel}
 */
export async function createChannel(bot, guildId, options) {
    // BITRATE IS IN THOUSANDS SO IF USER PROVIDES 32 WE CONVERT TO 32000
    if (options?.bitrate && options.bitrate < 1000)
        options.bitrate *= 1000;
    const result = await bot.rest.runMethod(bot.rest, "POST", bot.constants.routes.GUILD_CHANNELS(guildId), options
        ? {
            name: options.name,
            topic: options.topic,
            bitrate: options.bitrate,
            user_limit: options.userLimit,
            rate_limit_per_user: options.rateLimitPerUser,
            position: options.position,
            parent_id: options.parentId?.toString(),
            nsfw: options.nsfw,
            permission_overwrites: options?.permissionOverwrites?.map((overwrite) => ({
                id: overwrite.id.toString(),
                type: overwrite.type,
                allow: overwrite.allow ? bot.utils.calculateBits(overwrite.allow) : null,
                deny: overwrite.deny ? bot.utils.calculateBits(overwrite.deny) : null,
            })),
            type: options?.type || ChannelTypes.GuildText,
            default_sort_order: options.defaultSortOrder,
            reason: options.reason,
            default_auto_archive_duration: options?.defaultAutoArchiveDuration,
            default_reaction_emoji: options.defaultReactionEmoji
                ? {
                    emoji_id: options.defaultReactionEmoji.emojiId
                        ? bot.transformers.reverse.snowflake(options.defaultReactionEmoji.emojiId)
                        : options.defaultReactionEmoji.emojiId,
                    emoji_name: options.defaultReactionEmoji.emojiName,
                }
                : undefined,
            available_tags: options.availableTags
                ? options.availableTags.map((availableTag) => ({
                    id: bot.transformers.reverse.snowflake(availableTag.id),
                    name: availableTag.name,
                    moderated: availableTag.moderated,
                    emoji_name: availableTag.emojiName,
                    emoji_id: availableTag.emojiId ? bot.transformers.reverse.snowflake(availableTag.emojiId) : undefined,
                }))
                : undefined,
        }
        : {});
    return bot.transformers.channel(bot, { channel: result, guildId: bot.transformers.snowflake(guildId) });
}
