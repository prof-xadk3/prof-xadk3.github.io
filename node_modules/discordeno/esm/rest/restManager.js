import { API_VERSION, baseEndpoints } from "../util/constants.js";
import { removeTokenPrefix } from "../util/token.js";
import { checkRateLimits } from "./checkRateLimits.js";
import { cleanupQueues } from "./cleanupQueues.js";
import { convertRestError } from "./convertRestError.js";
import { createInvalidRequestBucket } from "./createInvalidRequestBucket.js";
import { createRequestBody } from "./createRequestBody.js";
import { processGlobalQueue } from "./processGlobalQueue.js";
import { processQueue } from "./processQueue.js";
import { processRateLimitedPaths } from "./processRateLimitedPaths.js";
import { processRequest } from "./processRequest.js";
import { processRequestHeaders } from "./processRequestHeaders.js";
import { runMethod } from "./runMethod.js";
import { sendRequest } from "./sendRequest.js";
import { simplifyUrl } from "./simplifyUrl.js";
export function createRestManager(options) {
    const version = options.version || API_VERSION;
    if (options.customUrl) {
        baseEndpoints.BASE_URL = `${options.customUrl}/v${version}`;
    }
    const rest = {
        invalidBucket: createInvalidRequestBucket({}),
        version,
        token: removeTokenPrefix(options.token),
        maxRetryCount: options.maxRetryCount || 10,
        secretKey: options.secretKey || "discordeno_best_lib_ever",
        customUrl: options.customUrl || "",
        pathQueues: new Map(),
        processingQueue: false,
        processingRateLimitedPaths: false,
        globallyRateLimited: false,
        globalQueue: [],
        globalQueueProcessing: false,
        rateLimitedPaths: new Map(),
        debug: options.debug || function (_text) { },
        checkRateLimits: options.checkRateLimits || checkRateLimits,
        cleanupQueues: options.cleanupQueues || cleanupQueues,
        processQueue: options.processQueue || processQueue,
        processRateLimitedPaths: options.processRateLimitedPaths ||
            processRateLimitedPaths,
        processRequestHeaders: options.processRequestHeaders ||
            processRequestHeaders,
        processRequest: options.processRequest || processRequest,
        createRequestBody: options.createRequestBody || createRequestBody,
        runMethod: options.runMethod || runMethod,
        simplifyUrl: options.simplifyUrl || simplifyUrl,
        processGlobalQueue: options.processGlobalQueue || processGlobalQueue,
        convertRestError: options.convertRestError || convertRestError,
        sendRequest: options.sendRequest || sendRequest,
        fetching: options.fetching || function (opts) {
            options.debug?.(`[REST - fetching] URL: ${opts.url} | ${JSON.stringify(opts)}`);
        },
        fetched: options.fetched || function (opts, response) {
            options.debug?.(`[REST - fetched] URL: ${opts.url} | Status: ${response.status} ${JSON.stringify(opts)}`);
        },
    };
    return rest;
}
