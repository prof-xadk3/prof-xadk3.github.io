"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useTheme = require("../shared/use-theme.js");

var _useThemeClasses = require("../shared/use-theme-classes.js");

var _useDarkClasses = require("../shared/use-dark-classes.js");

var _ToolbarClasses = require("../../../shared/cjs/classes/ToolbarClasses.js");

var _ToolbarColors = require("../../../shared/cjs/colors/ToolbarColors.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Toolbar = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    component = 'div',
    className,
    colors: colorsProp,
    translucent = true,
    bgClassName = '',
    innerClassName = '',
    outline,
    tabbar,
    tabbarIcons,
    tabbarLabels,
    top,
    ios,
    material,
    children,
    ...rest
  } = props;
  const highlightElRef = (0, _react.useRef)(null);
  const elRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const Component = component;
  const [highlightStyle, setHighlightStyle] = (0, _react.useState)({
    transform: '',
    width: ''
  });
  const theme = (0, _useTheme.useTheme)({
    ios,
    material
  });
  const themeClasses = (0, _useThemeClasses.useThemeClasses)({
    ios,
    material
  });
  const dark = (0, _useDarkClasses.useDarkClasses)();
  const attrs = { ...rest
  };
  const colors = (0, _ToolbarColors.ToolbarColors)(colorsProp, dark);
  const isOutline = typeof outline === 'undefined' ? theme === 'ios' : outline;
  const c = themeClasses((0, _ToolbarClasses.ToolbarClasses)({ ...props,
    outline: isOutline,
    translucent,
    bgClassName,
    innerClassName
  }, colors, className), className);
  const hasHighlight = theme === 'material' && tabbar && !tabbarIcons;
  (0, _react.useEffect)(() => {
    if (hasHighlight && highlightElRef.current) {
      const linksEl = highlightElRef.current.previousElementSibling;
      const width = 1 / linksEl.children.length * 100;
      const activeIndex = [...linksEl.children].indexOf(linksEl.querySelector('.k-tabbar-link-active'));
      setHighlightStyle({ ...highlightStyle,
        width: `${width}%`,
        transform: `translateX(${activeIndex * 100}%)`
      });
    }
  }, [children]);
  return /*#__PURE__*/_react.default.createElement(Component, _extends({
    ref: elRef,
    className: c.base
  }, attrs), /*#__PURE__*/_react.default.createElement("div", {
    className: c.bg
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: c.inner
  }, children), hasHighlight && /*#__PURE__*/_react.default.createElement("span", {
    className: c.highlight,
    style: highlightStyle,
    ref: highlightElRef
  }));
});
Toolbar.displayName = 'Toolbar';
var _default = Toolbar;
exports.default = _default;